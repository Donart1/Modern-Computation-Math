(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    162484,       3334]
NotebookOptionsPosition[    154476,       3214]
NotebookOutlinePosition[    154864,       3231]
CellTagsIndexPosition[    154821,       3228]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Mean-Median Map Project", "Title",
 CellChangeTimes->{{3.727740264147788*^9, 3.727740268578574*^9}, {
   3.728155338693533*^9, 3.7281553454358263`*^9}, 3.72919636839991*^9, {
   3.729196411466568*^9, 
   3.729196414930231*^9}},ExpressionUUID->"4c1f33e0-9a28-4fdc-8691-\
5fbfbbd63868"],

Cell["\<\
In this project we will investigate the Mean-Median Map. The claims that we \
will try to prove in this project come from a this paper \
\[LineSeparator]Hyperlink[\[OpenCurlyDoubleQuote]http://www.math.grin.edu/~\
chamberl/papers/mean_median.pdf\[CloseCurlyDoubleQuote]]. 

The Mean-Median Map deals with finding the next number in a sequence which \
makes the mean equal to the median.  There comes a point in this sequence \
where the number that is added is the same as the previous number and \
continues to be so indefinitely. Now we will start by proving the claims.\
\>", "Text",
 CellChangeTimes->{{3.727740398341977*^9, 3.7277404122428484`*^9}, {
  3.729196377818172*^9, 3.729196384127762*^9}, {3.729196418924926*^9, 
  3.729196450779881*^9}, {3.729196491587698*^9, 3.729196516435021*^9}, {
  3.72919656490914*^9, 3.729196596723991*^9}, {3.7291966538245573`*^9, 
  3.729196906485301*^9}, {3.7291969576465273`*^9, 
  3.729196978942054*^9}},ExpressionUUID->"16005c57-892d-4eeb-8c6f-\
abdfc63d0f5d"],

Cell[CellGroupData[{

Cell["Preliminary Function:", "Section",
 CellChangeTimes->{{3.729197046637743*^9, 
  3.7291970724641743`*^9}},ExpressionUUID->"61419295-fdfd-4299-8270-\
7489df9b1d60"],

Cell["\<\
Before we start proving the theorems required by the project we should first \
have a function that defines the next value. \
\>", "Text",
 CellChangeTimes->{{3.7291970763818007`*^9, 3.72919713697344*^9}, {
  3.729433517299376*^9, 3.729433582489173*^9}, {3.729435978670376*^9, 
  3.7294359791557426`*^9}},ExpressionUUID->"88673dfb-1542-4a1e-8ade-\
97329cca31ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nextVal", "[", "vals_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"med", ",", "ret", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"med", "=", 
      RowBox[{"Median", "[", "vals", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"Find", " ", "the", " ", "median"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{
       RowBox[{"Length", "[", "vals", "]"}], "+", "1"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Length", " ", "of", " ", "the", " ", "list"}], " ", "+", " ", 
       RowBox[{
       "1", " ", "for", " ", "the", " ", "added", " ", "new", " ", 
        "value"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ret", "=", 
      RowBox[{"Simplify", "[", 
       RowBox[{
        RowBox[{"n", "*", "med"}], "-", 
        RowBox[{"Total", "[", "vals", "]"}]}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{
      "the", " ", "new", " ", "value", " ", "that", " ", "makes", " ", "the", 
       " ", "mean", " ", "equal", " ", "to", " ", "the", " ", "median"}], 
      "*)"}], "\[IndentingNewLine]", "ret"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7291971450656843`*^9, 
  3.729197207321455*^9}},ExpressionUUID->"1fd96d7b-541d-41e9-8ca1-\
2c64785292de"],

Cell["\<\
This function finds the next value that makes the mean of the sequence of \
numbers equal to the median. This function will be used throughout the \
project. \
\>", "Text",
 CellChangeTimes->{{3.729197213381461*^9, 
  3.7291972902327013`*^9}},ExpressionUUID->"8ce27569-2a86-4772-80a4-\
d74c1216ad2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Theorem 2.1", "Section",
 CellChangeTimes->{{3.7291969823225183`*^9, 
  3.729196998391276*^9}},ExpressionUUID->"9b85ef1e-5dba-4ad1-937f-\
5245fdd8dfd2"],

Cell["\<\
Theorem 2.1 states that the sequence of medians is monotone. This means that \
the list of means generated by adding new numbers will either be increasing \
or decreasing. We will write a function that generates a list of medians and \
then we will check if this list is monotone\
\>", "Text",
 CellChangeTimes->{{3.729197002998652*^9, 3.729197037481228*^9}, {
  3.729197322897058*^9, 
  3.729197372722197*^9}},ExpressionUUID->"d3323121-baca-40dc-9c32-\
62205355703f"],

Cell["\<\
The following function will calculate the medians every time a new number is \
added to the list and will save those in a list which whill be returned in \
the end\
\>", "Text",
 CellChangeTimes->{{3.7291976420869102`*^9, 
  3.729197705158489*^9}},ExpressionUUID->"726e53ed-07e2-48aa-a348-\
cdc4e88261d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"medianGenerator", "[", "initSeq0_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"currSeq", "=", "initSeq0"}], ",", "\[IndentingNewLine]", 
      "sortSeq", ",", "totVal", ",", "medVal", ",", "lastVal", ",", "currVal",
       ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "initial", " ", "total", " ", "and", " ", "sorted", " ", "sequence"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"totVal", "=", 
      RowBox[{"Total", "[", "initSeq0", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"calculate", " ", "the", " ", "total", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"sortSeq", "=", 
      RowBox[{"Sort", "[", "initSeq0", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"sort", " ", "the", " ", "sequence"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "these", " ", "are", " ", "needed", " ", "at", " ", "each", " ", 
       "step"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"Length", "[", "initSeq0", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lastVal", "=", 
      RowBox[{"initSeq0", "[", 
       RowBox[{"[", 
        RowBox[{"-", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"define", " ", "last", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"currVal", "=", 
      RowBox[{"initSeq0", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"define", " ", "current", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"med", " ", "=", " ", 
      RowBox[{"Median", "[", "currSeq", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"find", " ", "the", " ", "median"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"create", " ", "a", " ", "list", " ", "with", " ", "medians"}],
        ",", " ", 
       RowBox[{"put", " ", "the", " ", "first", " ", "median", " ", "in"}], 
       ",", " ", 
       RowBox[{
       "this", " ", "will", " ", "be", " ", "very", " ", "important", " ", 
        "since", " ", "we", " ", "will", " ", "return", " ", "this", " ", 
        "list"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"medians", " ", "=", 
      RowBox[{"{", "med", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"lastVal", "\[NotEqual]", "currVal"}], " ", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Median", " ", "is", " ", "easy", " ", "to", " ", "find", " ", "on", 
         " ", "a", " ", "sorted", " ", "list"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"medVal", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OddQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"sortSeq", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "/", "2"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"sortSeq", "[", 
               RowBox[{"[", 
                RowBox[{"n", "/", "2"}], "]"}], "]"}], "+", 
              RowBox[{"sortSeq", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"n", "/", "2"}], "+", "1"}], "]"}], "]"}]}], 
             ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "redo", " ", "last", " ", "and", " ", "current", " ", "values", " ",
            "using", " ", "the", " ", "pre"}], "-", 
          RowBox[{
          "computed", " ", "\[IndentingNewLine]", "median", " ", "and", " ", 
           "total"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"lastVal", "=", "currVal"}], ";", 
        RowBox[{"(*", 
         RowBox[{
         "save", " ", "the", " ", "curr", " ", "value", " ", "as", " ", "the",
           " ", "last", " ", "one"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "+", "1"}], ")"}], "*", "medVal"}], "-", 
          "totVal"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
         "find", " ", "the", " ", "currVal", " ", "using", " ", "the", " ", 
          "formula"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "append", " ", "to", " ", "our", " ", "current", " ", "sequence", 
          " ", "and", " ", "increment", " ", "n"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"currSeq", ",", "currVal"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"med", " ", "=", " ", 
         RowBox[{"Median", "[", "currSeq", "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"find", " ", "the", " ", "new", " ", "median"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "append", " ", "the", " ", "new", " ", "median", " ", "to", " ", 
          "the", " ", "medians", " ", "list"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"medians", ",", "med"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Increment", " ", "the", " ", "total"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"n", "++"}], ";", "\[IndentingNewLine]", 
        RowBox[{"totVal", "=", 
         RowBox[{"totVal", "+", "currVal"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Resort", ".", " ", "Sorting"}], " ", "an", " ", "almost", 
          " ", "sorted", " ", "list", " ", "is", " ", "pretty", " ", "fast"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"sortSeq", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"sortSeq", ",", "currVal"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Delete", "[", 
      RowBox[{"currSeq", ",", 
       RowBox[{"-", "1"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "medians", "]"}], ";"}]}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "return", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "that",
      " ", "we", " ", "will", " ", "plot"}], "*)"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.72919740892647*^9, 3.729197413126232*^9}, {
  3.7291974502792473`*^9, 3.7291975118310623`*^9}, {3.7291975904020863`*^9, 
  3.729197606867702*^9}, {3.729197708667791*^9, 3.729197926705892*^9}, {
  3.729197962747972*^9, 3.729197988136015*^9}, {3.729198069386105*^9, 
  3.729198074419786*^9}, {3.729277042725503*^9, 3.729277048968717*^9}, {
  3.729295992588888*^9, 3.7292961586302557`*^9}, {3.729296194067565*^9, 
  3.729296206441196*^9}, {3.729296289594418*^9, 
  3.729296530685601*^9}},ExpressionUUID->"61acfcb1-086c-4869-9ed6-\
da91c50d6dea"],

Cell["Now let\[CloseCurlyQuote]s try if our function works with an example \
list. ", "Text",
 CellChangeTimes->{{3.7291979295790253`*^9, 3.72919794509072*^9}, {
  3.729198140687407*^9, 
  3.729198146171352*^9}},ExpressionUUID->"ea801e9d-aac2-46b6-8fc4-\
3e5d6d6c1155"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"vals0", "=", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "17", ",", "13", ",", "14", ",", "12", ",", "3", ",",
       "4", ",", "134", ",", "1234234", ",", "23"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "a", " ", "list"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"l1", " ", "=", " ", 
    RowBox[{"medianGenerator", "[", "vals0", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "call", " ", "the", " ", "function", " ", "that", " ", "generates", " ", 
    "medians"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "l1", "]"}]}], "Input",
 CellChangeTimes->{{3.729197952489043*^9, 3.729197956353635*^9}, {
  3.729197992488624*^9, 3.729198067046587*^9}, {3.7291992404615583`*^9, 
  3.729199242738072*^9}, {3.729266908471098*^9, 
  3.7292669155179977`*^9}},ExpressionUUID->"8315ef87-837f-40e1-8a7d-\
84f4d784ee7f"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 13.}, {2., 12.5}, {3., 12.}, {4., 9.25}, {5., 6.5}, {6., 
      6.}, {7., 5.5}, {8., 4.75}, {9., 4.}, {10., 3.5}, {11., 3.}, {12., 
      3.}, {13., 3.}, {14., 3.}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 14.}, {0, 13.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7291980322456303`*^9, {3.7291992375585737`*^9, 3.7291992444396553`*^9}, 
   3.729264450368738*^9, {3.729266921006652*^9, 3.729266923805175*^9}, 
   3.7292770579284363`*^9, 3.7292961655993633`*^9, 3.7292962092811537`*^9, 
   3.729296545563177*^9, 
   3.729435998177553*^9},ExpressionUUID->"2784e47f-834c-4c3f-8967-\
d9c2ff881c24"]
}, Open  ]],

Cell[TextData[{
 "As we see from this example our function works! Now we have to try it in a \
large scale. \n\nTo prove this I will generate 10 random numbers ",
 StyleBox["n. ",
  FontSlant->"Italic"],
 "I will create 10 lists with ",
 StyleBox["n ",
  FontSlant->"Italic"],
 "random numbers and I will see if the mean is monotone for each of those \
lists. "
}], "Text",
 CellChangeTimes->{{3.729198048079311*^9, 3.729198062634179*^9}, {
  3.729198104860858*^9, 3.729198120952817*^9}, {3.729198196104851*^9, 
  3.729198307964569*^9}},ExpressionUUID->"5d5f006c-4636-4c6d-aa16-\
525caa623a54"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"listOfPlots", " ", "=", 
    RowBox[{"{", "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "list", " ", "that", " ", "will", " ", "hold", " ", "all", " ", "our", " ",
     "lists", " ", "of", " ", "medians"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", "100"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "10000"}], ",", "10000"}], "}"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"chose", " ", "a", " ", "random", " ", "int"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"l2", " ", "=", " ", 
     RowBox[{"medianGenerator", "[", "randomList", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "append", " ", "this", " ", "list", " ", "to", " ", "the", " ", "list", 
      " ", "that", " ", "will", " ", "hold", " ", "all", " ", "lists", " ", 
      "of", " ", "medians"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"listOfPlots", ",", " ", "l2"}], "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.729198330955551*^9, 3.7291983560129757`*^9}, {
   3.729198400496311*^9, 3.729198548505211*^9}, {3.729198640642736*^9, 
   3.7291986485550737`*^9}, {3.729198751838846*^9, 3.7291989035947733`*^9}, {
   3.729198938826476*^9, 3.7291989736037703`*^9}, {3.729199017939249*^9, 
   3.7291991268883457`*^9}, {3.729199158191372*^9, 3.729199187523202*^9}, {
   3.729199270352118*^9, 3.729199271519457*^9}, {3.729199309163661*^9, 
   3.729199330056234*^9}, {3.729199414481943*^9, 3.729199416868643*^9}, {
   3.729199451534639*^9, 3.7291995166140537`*^9}, 3.729199574612355*^9, {
   3.729199643009438*^9, 3.7291996550803537`*^9}, {3.7291996899649057`*^9, 
   3.7291996959399776`*^9}, {3.729199743808477*^9, 3.729199780937043*^9}, {
   3.729199829920735*^9, 3.729199835009313*^9}, {3.729199891862584*^9, 
   3.7291999462894297`*^9}, {3.729199982700683*^9, 3.72919999172327*^9}, {
   3.729266884793764*^9, 3.72926688523603*^9}, {3.7292965838609343`*^9, 
   3.729296790845255*^9}},ExpressionUUID->"e9bd6ff2-3d78-4a1a-8f1c-\
6a3fca800b89"],

Cell["\<\
Let\[CloseCurlyQuote]s check that our list of plots actually works and let\
\[CloseCurlyQuote]s try to plot each list:\
\>", "Text",
 CellChangeTimes->{{3.729296792982925*^9, 
  3.729296826594367*^9}},ExpressionUUID->"6eb4a468-1311-468b-9b52-\
3c66da659b7f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "2", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "3", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "4", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "5", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "6", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "7", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "8", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "9", "]"}], "]"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"listOfPlots", "[", 
    RowBox[{"[", "10", "]"}], "]"}], "]"}], " "}]}], "Input",
 CellChangeTimes->{{3.7292968294433126`*^9, 3.7292968846384563`*^9}, {
  3.72943588370656*^9, 3.7294358953483152`*^9}, {3.729435935652307*^9, 
  3.729435963676569*^9}},ExpressionUUID->"a287c395-7bea-4852-a56c-\
8a3ea55a5c0b"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxd3H+0XPO5x/HdrNx2rqXMImraprWbIsONdkTK1M9NQoaEjjgYScpORE2J
ZuQHw43YCB1EbYQMgi2CkRs6l4gpoTtX1KFpO4g6bkm2ShmlTAl3kOXe1e/n
+567Vv3zrJfn+3yf77Mf579zfGfmnClnDXMcZ+5wx/lH1D/dI0zIXebZf6FY
xCnFCk4rxldZj1BML7HO2Ho8UjHErmITj1Js4z0VvdB6b8XMjdZZxfxN1vsq
lpZaj1Es4+8pVnFOcR3e38abbRyrOH+Z9QGKnVutxyl+iH+guB0fqLjLbdYH
KWZxXrGCf6jYwgcrxvgQxUF8qOIQPsy+Dx+uOOZ26yNsP+wpHrxcMbAefofN
H6m4zDqw3vdOmz9KcZx1YH04+fGKE8lbF8lPUCyRt/bJH614wV02b31MZPPH
KD5gHVjveLfNT1QcYR1YjyRfUNyDvPUo8scqjiZvPYb8cYo58tbjyE8y0ZtI
Xg6mkp+s/OnkZWcm+eNNjHEgB2eSP0H5+eRl5yryP1K8lrx1SL6o+x6w9mTn
ac7L0XPWsey1qT9R8QXq5RgHsv8y9fb8q9RPUf+dV9h62TnGOpBjHNvzE62d
k5Q/n3rZWU79SXY+6m3+MeoHFB+n3vpJ6uXoKeplL6b+ZMX11MsxDuTkS/fY
env+KGvnFJ3HnhyMtw5s/kTqZcen/lTFWdRbl6mX3fOpl72LqS8pLqJeji+j
XvZWUm/zv6H+NL33Weplb5B6Ofwd9XLyIvVTVb+Jetn9I/Vy+Ar1svMq9dMU
N1Nv/Sb1cvgZ9bK7y0pbP13z7Gbtyf7XrQO5e6B1LAcD1P9Y855MveycQr0c
nE29zV9E/emKi6i3voJ6ObiNept/mPozFB+l3rpFvey+RL3svU+9b2IJu3IF
e3LmA2tfjnEg17rWkVz8O/3kbZ9aJ3J92L22/wwTm9iVB7Enr/yKtS8HO1oH
sruTdSTHO1vHcmtX68T2253+M9UPu3KCPXnNKPrLtf3oL0c4kls4ltfl6S/H
4+l/polD2JW72JN72JedCfSXN0ykv1ybRH85xIlcx84sE2f/iP6ydxL95QL2
5SIO5AaOZGeA/vKYU+kvl6bS/ywTK9iVa9iT29iXM9PoL7s4krM4lsedQX/Z
O5P+P9F82JWL2JNnn01/uXYu/eUQR3Idx/LwOfSXK3Ppf7buw64cYU8uzKO/
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
2PkbduX3cVb+AOeM4+6z7F/9Phxk/+r3ES6ofhsuygc/x/7lAPvyDbgsr8AV
eS2uys/jQP4trskbcWgczXue/eu93/wt+9f5kbiheftuGif74JbOH4RjfY/x
eFD5Im4rvwUPKT9nI/uX5+KOvAB35aW4Jz+CnStNXINT8qM4LX/pd+xfPh67
xnHfWePgBJwz9tbjvOrH/Z79yx4uyJNxUb4Fl+QE+/KwP7B/eU9ckbO4Ko/B
gbE/Ddc0zzU41DzX4rrmWYIjY3c5buj+1bgpP4hb8kM4lvdps395JW7LDTxk
78eJvBl35PQL7F/vPx/3lH8JO1eZeftOGQebcNrY24wzxk4Hu/KHOCtvxznd
N+1F9q/8E9iT1+GC/CQuyjEuyU9jX96Ky/K/vMT+jf2bcVXz7rWJ/et9e+Oa
5h2NQ2N3Fa7r/v1eZv/KH4obqp+Em8bRZNxS/QnY/t70iXhQHsBt+/3wkPJn
4sQ4OQt3NF8ZdzX/CtxT/WvY+bmJr+OUvBmnjb39/8j+jYPF2FX+SpxV/VU4
Z+yue4X96/yHQ+xf5z/CBeO476KxP/xV9q/zu2Ff/houy7vjinFlBq4aJ/+B
A73nQVwzjh7CoXFxC67r/vR/s385gxuyi5tyAbfkCo7lKh6UA9yWa3hIDnEi
13FHjnBXbuCe3MROzcQWTskxTsvOn9i/7GFXnoCzcgHnjIOTcV75M7FnHPdd
0PlZuGjsPYNLqt/7NfYv74PL8hhckcfjqjwVB/I0XJOn41C+D9flLo7kbbgh
93DTODn/dfaved/FseZ9Dw9q3r/htnH0IR6y9+PE2B2xmf2rPoe7qt8f91R/
AHauNv1/gFPGTh6njZs/xRlj/3bsGnt34qyxezfOGafX47zufwN78lZckN/G
RfnkLexffhr78gZclp/BFeN4VML+NW+AA73/MlxT/eU4NO4+/gb7N04++jP7
V/3HuGEcfYKbqt/pTfav86NxrH5ZPKj39t3W987jIZ0v4EQ+Fnfk43BXvg73
5DZ2rlHcyv7lHE7Lw/7C/uVN2DWO+84aBy/jnLG321vsX/UnY08u4YI8DRfl
5bgkv459eTMuy1twRf0TXNX73sCBzm/FNeXfwqFx+6S32b+xux5HxpXf4oa+
x8u4qfOv4JbuH8Kxcfd1PGjsv4nbxuGBHfav+6/Gie67Bnc077W4q/mW4Z7q
V2Dn2n/E6F6cMg4aOG3sPYQzxs4a7MotnJXX4Zycfof9y7OwJ5+NC/I5uCg/
i0vynn9l//JJuCxfjivyFbgqL8aBHOKavByHcoTr8kocyQ3ckFfjprwWt+QY
x8bxR3hQ33/0u+xfPhQPySfiRPuZgjv2e+CusT8D99RvDnb0d3bn45SxNxfr
7/j8BThjHFSxa1z5/nvsX+ffwjnj+G2cN3bfwZ5x+1t/Y/+6fwrW3w16p+GS
3utjX/f3XVb9DFxRvoqrqg9xYBwluKZ++7/P/nV+LK7rvr4j4+Qw3ND5Y7H9
u8bjcEuehGN9vx/jQd03B+vvIONL8JDeey1OjMPxH7B/zf857qr+S132r/4p
7Fxnzu+AU8bOV3HaOE7jjM6PwK6xm8FZnf8mzun8Xjhv7H0fe6o/CBfU/whc
1HkPl3Tfkdg3jo7BZfWfhCs6PxlXdd/xODAuzsQ1Y/9CHOq+hbiu916OI+P0
MtzQ+1fjpvwMbsmbcSxvw4PyDn9n//IIPCR/Gyd63x64o3m/g7uadxTuqf67
2PmFOb8fThk7eZyWD8EZ+XDsGrfPw1nj6A6cM45X4bxx8hj2jLt/wgXd73zI
/uWRuGTfh329v++y8j/EFeX7rip/MA70nr5reu8hOFT+MFxXvYcjeTJuyCXc
VP9NuKX8iR+xf/Xre1Dnp+C2cTiAh/R9T8GJzp+GO8b+dNw1zp2De+pfxc71
JsY4Jae2sX9j/1s4YxyPxa5xcADOGnvjcE71R+C8zh+HPfWbhAvK911UfjIu
Kd+3r/zxuKx83xW9dyau6nwVB3KAa3INh7pvGa4rfz+O5FW4IT+Im6p/EbeU
7+FYdj5m//b747acxkNyBieyiztyFnflHO7JeeyYv6v3D8PDjeOjcEp/dz8B
72jsHY3TxtExeITOF3BGLuKRcgm7so/3lMs4K1fwGLmKc3KAx8k1nDfuPowP
NU5ex/r/CsSb8QTNswUXjIt7fWI9Wfefi4vGQd8Dys/GJeX7nq78edhXvu9Z
yv8Ml5Xve7byc3BF+b7n2++Fq5p3Ll6oeRfgQPUX4MXa74W4pvp38RKd9/+H
nw+dn4GXqv9MXNf3q+Dl+r6LcKT3XIZXqt9i3DCu3IJX6/4Gbsqr8Rq5iVv6
7/tTvM7+993j50/zTMAbNM8xeFDvmYc36vzduK1+K/Am5fseUv4e/JryfSfK
r8Rble+7o/y9+D3l++4qfx/epnzfPeXvx9uV79u5wcQGHm4c9J1S/gG8o/J9
p5VfhUco33fG2B37KT//xvGvsGscPY73VP0TOKvz6/EY9RvEOXkjHie3cd7Y
6/tQ3d+3p/wLeILqX8QF+WU8WR7CRfk1PCAnuCRvxdPlDvbV/wM8S+/7BJd1
/lM8W/nPcUXfZ9fP+PnX+TG4Kp+DF9p940D9H8KLdf8aXNP9fS9R/aM4lNfi
pfJjuG73i5er31M40vlf45Xq13fDOHker9b5P+Km3tv3GuVfwS3lt+B19vvj
+J+84Z88+P/+P+iF78g=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 2459.6215576171876`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 1138.}, {2482.56591796875, 2941.453125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437166896617*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
4Dt+7QecVIrx+/NcvC6Z9P/rqdWIe1WPJzktVN3I0TbtbyKh3tzcNHgvrknK
I0MUuzFEx0R0gsSE2qgc2Negn38SMikXEvZAcrbELE6D/dgBIpNdJpnf9fqx
FopxRZFkOqKO3DV5RlKwa7Pg1EHG6rmyTj/qYv79Fe9wNWp5W2y1Oub2gVxP
UKsfZ5nodMJJHUDlHbRDrHYJn1SboFTX1ejHxQ+Qoqoihocn0/eoE2W9bvWn
cBzjAs23c99TJ5FX2cchOJ6qT7eF6hlIB/EqJzk5HKjatfaQtlQKHMSbzFJp
9tUESoOBeNIsl+Me0o4qRRy2lPSMerq78axWDqehQj+aajGeiuuGlO2/944l
qmUnKzbuZT33Qai4iz4ln0IrZY9pyAv9Jon+F4r9Kv+jBOiNZzU62Iv0Y5dE
5Tgm51a5nMp0U0rquNpMFglqOps3v1Kc4lioH2+tSmZpXifDzju2SCeZrKMd
RMBLKH0J//v9+GVFKOkMWgS8zjzXMZ4wp3dQ5tWUIqFk53+hY1+SeMc8reHm
BuUcZe7k676F9FhcXBxXkS0qySAqqAyF3sALNbTlAVLc1VDaNYXxn94ih4By
99NAB3VvbW0ZtIueXaPJoWtC2tPAL93wABOJ9CUF0OQ2Z+vnfKfgzIQyRaQr
2/EplRL7TSXljNEs/ai7xGCjpdtVraPceyY6z90sEg5LptKZcuGkkvbO1I+3
Twgh4aU5mvw10VwdA0MeQfJgTNePckDwluSDZIMvcJKtMEOl5kKodY7ttX5s
Q0Ka1TyV8wqKeKm1+Sv9uIaFTM2LloXc+6hT30kjg9Lin0AzKvqChIe7Qarm
ECplEL3Uj2NMJd7cQPfVzfLHv26gzTU4mjT9aMZV3FEfE6L1gMSQkN3rZ/px
TYhrVFbtxw2ldF13XTQxOqVKiy9VP75JIQeTwh066ZeuYx0G7bc1U/RjmxKC
Sq0jbWkmqgzVgioz73oqp5ijTNKPUjqC/Jd5P1JaiqqWuKL0TVeWtu+1xsjI
Jh1PNi1ZZvT7PhMZua/u6X/dnODHPNeb0rhgPFE7OmImMZDttW+EhlAKuw85
rmdBoOcD5WahrBW+UNCnyyUsEqoEXVSy7q2oqDBYFLymlpLFI28CRIpdatrn
cvWXMtVSSVE0c64UyYjf31Q6qX17e9tAOjH8Rxw/2ap0/kJN2zjX8fJfwR2d
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
C/6hsuM3cMOIvg==\
\>"],ExpressionUUID->"10255f48-c675-4bd1-9ae7-b615099e2bbf"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdz3mw1WUdx/Enmyb+cKaTOaMzgvPTIYcInGOZgAo8uCCuHBDlAi4/UPSy
HxAVcelJpTBablZ6calfWXjT0GOgsolPi0SKet2v2vKLliFbvFPT5LRNdT+f
9zQjf8C8eM77fM/nqAUrZi48KITwu/eE8L9/9Wdw8tA/Szdk/0cc+rv3dnuY
3LXRbsgHV/ah8pH32YfLzU32cPkeXMjD7rePlifikfIqfIw84wF7lL9/sz16
yOnDD9lj9H7Ew/axcgs35XX4uCHnro79Mb2/jT+u73/rEft4vf/2e/Yn5OFb
7BPkmXicvBuPl0dvtSd4Dz5RPgGfpPstfLLel+CJen8bT9L76kftyfJaHOVk
J/u4x/w+Rd5vJ/sA76fIf+Ldnvu430+V99jJPmyb30+Tu+1kL+f9dP9+3uW0
lfepev8r73K6Zbvfz9D7ITv8LsfD7DBNnx/OuxxH8H6m+iN5l/M43s9SP4N3
uZrF+9n6/Gze5dTF+zm6N4d3uVzD+7n6/J28y7GX9/P0+zbyLlfbeZ+uz7/B
uxze5L2l34ejXP+Lz8uh2Clnfx6HGfp9R9lRjmPtJIcJ9PLgVPqZujeLXg5d
9HIxj14enE9/vn5PN72cFtHLcTG9vZ5+lryJXk4P0su5Qy/XW+kv0O/dTi9n
nOS0g16OO+kvVL+LXq5+Qy/HD+xy78837DBb93CU0wftJMdD6OXwIfou9TjK
9SR6OSym9+dxmKN7S+jluJReDsvo5YzDXPXL6eW4gl4ObXo54zBP/Up6ubiV
Xs530Mv1RvqL9P330sv1Fno5P00vp2foL9bv3Ucvh2fp5YyznJ6jv0T98/Ry
6KeXM85yeoH+UvUv0svhJXo54yynl+lL9a/YhRxe5fvkjEs5vcb3ux+wK7l+
/xO+58+Ps2t/frwd5uveBLuQM45yOtEu5XiSndyfbFfucXY/kfvuJ3F/gfrJ
3JczjnKK3JfjFO67P4X77nF2fyr33Z/G/cvUn859OeMop6ncl+MZ3Hc/jfvu
cXZ/Jvfdn8X9y9WfzX054yinc7gvx3O57/487rvH2f107rtvcX+h+hnclwcX
cV+ub+a+3F7HfffruS/33MZ9udjAfb9v5P4V6vu4L1ebuS/HLdz357dyX864
ktOj3Hf/GPfdP879K9XjQk7buC/H7dyXww7uu8eV+53cd7+L++6f4H63elzI
aTf35fgk9+X/Br7vHlfuv8999z/gvvsfcn+RelzI6Ufcl+NT3JfDHu67x5X7
H3Pf/V7uu/8J9xerx4Wcnua+HJ/hvhz2cd89rtw/y333z3Hf/fPcX6IeF3Lq
574cX+C+HF7kvntcuX+J++5f5r77V7i/VD0u5PQq9+X4GvflMMB997hy/zr3
3b/Bffdvcn+ZelzI6afcl+PPuC+Hn3PfPa7c/4L77mvuu/8l95erx4Wc9nNf
jr/ivhx+zX33uJLrA9z35//IfX/fn7m/Qvf+xn05v2+378vhULuUx4+wk9w+
xq7kONbOcuN4u5a3TbFDe8jldLshd3Ahh5bdlDOOcppht+Q4k9/r/ny77R4n
97PsHrlxAXvkCnfkfpz9/Rfa/f5+XPv7Z9uD/n1d7F+pfg775YwLOc1lvxzn
sd/9Rex3j0v3F7Pf/SXsd38p+93jyn3Jfvfz2e9+Afvd49r9Zex3fzn7V6lf
yH4540JOV7Bfjley3303+93j0v0i9rtfzH73S9jvHlful7Lf/TL2u1/Ofve4
dr+C/e7b7L9K/Ur2yxkXclrFfjlexX73q9nvHpfur2a/+2vY7/5a9rvHlfs1
7Hd/Hfvdr2W/e1y7v5797m9g/2r1N7JfzriQ003sl+Mn2e8+sd89Lt1/iv3u
b2a/+1vY7x5X7m9lv/t17Hf/afa7x7X7z7Df/Xr2X63+NvbLGRdy+iz75biB
/e4/x365D5dy6/Psl7tx8vfjHrkXV3IHd+SuL7Df97/Ifv9+XPv7e9jv3/8l
9l+j/nb2yxkXcvoy++X4Ffa7/yr73ePS/R3sd38n+933st89rtxvZL/7u9jv
/m72u8e1+3vY7/5e9l+r/mvslzMu5PR19suxYr/7b7DfPS7df5P97u9jv/tv
sd89rtx/m/3uN7Hf/f3sd49r933sl/fisGbIje+wXy5xIXdwUx7AUQ4PsF/O
uJTTg+yX43fZ734z+93jyv1D7Hf/MPvdd9gvj8S1PA0Peh8O1w15DW7IPbiQ
+3BTzjjKA7glj3mE/XLCbblrJ/vl5lPs9/fvYb/c2st+ubuf/f7+AfbLvbiW
O3hQ3ovD2iHXuCG/gwu58Tr75VE4yhG35C5cym3clkfuZ7888Bb75fB79vse
7sh34Swf/Af2y01cy7PwoLzgL+y/Xr/v7+yXwz/YL/fgprzv3+yXhx30pPfL
BS7l8bgtt3CSu3GPnHAl9+KO3MFZ3ov75RrX8jt4UG681w43DHkUbsgRF3IX
bsptHOX1uCVXuJS34bbcbLBf7hvOfnkQV/L4EeyX/3k0++U8iv1y+gj7vWc0
+/2Ow43qcUNufJT9combcg+O7nFLHjOG/XIvbsu7cJJr3OP7Y9kvR9yR1+Ms
9+N++QCu5XAs++XDcbhpyE3ckKfhQi5xU16Do9yDW3IfLuWM2+9yepd7/u//
AA4hir4=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., -5859.89609375},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 489.}, {-7982.75, -5960.984375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437166987547*^9},ExpressionUUID->"7ca54d74-daf0-4280-b7a2-\
37c87100ead8"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdz11ol2UcxvGfUSmSsHwpCYWnsLWWzk2dWVl7MtOlzswssyz/rXQlSTsI
krK6zbAMSqPSWQZPVkOiF3ufOvI+DjLoyIOIJzrtYB0ERe/9r+tL4GA8fHbd
133du7j/4bWbz4qIU//+/vfVz1iPvoOl/6Bv46EsTpA7d9st8uk99lQ5vWBP
l9e8aM+Qi7124Z199iXyIJ4lrxuyW+UZld3m+3G7/AyeLU9+0+6QK9zp9+Mu
ueWwPc8etufb79oL5KW4W96OF8oj+Er5V7xInv6efZW86H37ankQXyMfwYu9
94F9rdz7oX1d0+nno3aP8p6P7VL5c3aS41vy6+WfyO1zP3G+RN5kJ3uE/Aa5
/VPn9iE7lsqj5PZ35DfKHZ85t5Mdy/T+neRy7CJfrvwN8uV+H3lv0/k0uZx+
I79J538nl9Mf5CvU7/rcuRwDdqyUt5Lb28hX6b5HyOXYQd6n/AlyOZ4iXy0f
J7d/Ib9Z/pPcPucL52v0/vF2KaeJdpLjPDs7n0T/FvWX0JdjO337cfr2k/TX
6r6X6MvxDn3nw/SdH6F/a9ONH+jL+aIR9+U0085yWdixrum62y7ltJK+HH30
na+mf5v2dtGX4xh9e5S+fZL+7brve/py/EXf+d/0nY875v567U+xSzm12kmO
Djs776Z/R9PlMvpyrKcv5w305bSR/gb1d9KXY5i+nI7Sd36C/p26H5dyGqUv
x5f0nZ+kf5f6P9KXY8Jx9+U00c7OJ9mxUZ5ml/ZM+nJd0JfzLPp36/5L6ctl
K325aKMvRzv9e+Q59O1O+vZC+vZi+pu0P0BfjpfpO3+FvvP99Bv6f3AhpwPc
J5dDdkOOg9wvVx/Zlc9/xZ7Pf23X3vuG/XvlMfbt8094X06T7YZcTrGTHFPt
yn2c3Z9m1+5fYEd/0/vm2oVc97Iv5xXsy9Uq9uWWfvbl9Cj7cjzGvvMd7N+n
/Gn25fQs+873sO/8efblvJd9n3+Vfee4dn8/+/c3XR5gX44h9uWMG3I6yL77
r7Hv/uvsu49r9w+xv1n5KfblGDfqfftsu2GPt5NcXGhXcnmZnX2+za69h2OL
3nO5XchlO/tyXMG+nHFyfzb77s9h3/0O9t3HMaD+XPblspN9ObrYlzNO7s9j
3/357Lu/gH33cTzQ9GAf+3KxhX05trIv19vYl8d2s+/zFftyiWs54XhQe4fZ
l/Nb7Mv12+zLMcz+Ga7OcP7f/wC+unTq
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 206.}, {-7334., 256.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167116671*^9},ExpressionUUID->"4ea6616b-5f97-4d17-9f01-\
7a78fa346337"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., -797.5}, {2., -635.}, {3., -517.}, {4., -399.}, {
      5., -104.}, {6., 191.}, {7., 218.}, {8., 245.}, {9., 280.5}, {10., 
      316.}, {11., 316.}, {12., 316.}, {13., 316.}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 13.}, {-797.5, 316.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167189275*^9},ExpressionUUID->"6449c231-d234-4a05-b1d8-\
1892c3b3e15f"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdz2uIVWUYxfFXDQn0wyG6iErtTER00qNlWZmzM1PTRse7ed2OmemYTlak
aPRq9+yDORGaF3Zm5d3T1crSXdEFKRtKIgrsFCJRFJMZkRRFs/6LoPmy+M3a
z1l7X9ywdML89iGE/u1C+Df111rbFr0fTPmH8q51+GzlKbukbHoCn6s80Yy7
KKc9hbsrF2/EiTJuxj2UP2/FPZX7ctxL+Y3dW1l6BvdRLrFrlB/b/ZQrtuGy
stezeICy43Y8UHnSvkx5/XP4cmVuD1Iesa9QnravVD7wPB6sPPcFfJVyv321
cvQOfI1y+k48RLloF76W39uNhyoP2bXKZXtwquy1VxnxQ/vor1Oe3E8vx79x
GCZ3rtDLoQaH69WPcS8X+90P531fpJeLgzjcoPt5L9HLYRUOI9Q/6V5Ov3Y/
UtnjZXrcH4dRyiHu5Xif+xuV77mX43H3o5Vn3Mux+yv0Y5S1OOJJ7m9SLnSP
n3Jfx757OR5xP1b5mfuxvJ/7ccof3ePf3dcrO7yqTHENjngyLuQ4A4fxygbf
y3GX7+l/9T2++DXuJyjH4VTOpuIoF3NwIcfFvp/YlukK38t5coB7OXyEC/w5
DpOUx3Eqx+99T/+r7+k7vs79ZGVXnMrpHhzlOPQN7nl+BA5T1NfhFM/EETf6
Xg7LfD9V/XLfy8W3vpfDmDe5x9NwmKacj1M5bsSR/qjv8SUHub9ZuRyncstW
HOX8fVzw/FHfT2/L7Avfy5V2b3Evh0txga/GYYZyJE7xBN/jWb7Hs30/UznH
93I61/dynOd7nm/y/Sz1q3wvF/f7Xg5rfc/zX/l+trLP29zjvjjiGlzIcSIO
c5QrfY8P+R63O8Q9bo9DpuyAEzmWcEp/Ic7oe+JI3xfncvVS78lFGVd5/jLv
z23LdJD35Tzzvhwe974cm71Pv8n7cvGS93n+iPfZO+b9BuVx7+NvvI+r3sff
eR+f8L5c/Ox9Of7hfdz+MPvz5E44kcP5OKVPcCYXfXHk+StxjofhAtfhKvfj
vX+Lfn+K9+Ui874cGr3P83d7nz56n/5R79M3ex9v8/585Yvex4e9jz/xPj7q
ffyp9+V4yvv0nQr25bSEw616/jycyMUFOJVDV5zJSTcc5bQ7zuW8Ny64H+R9
9gZ7f4FyiPflOML79OO9L982xftyywzvy+ks78uV2d6Xv5zj/duUc72PG7yP
53kfL/A+bvS+HO2CfrH36e/0/kLlSu/L8SHv06/3vpx+6H2e/9P7PP+X9+nt
qpx3fof9RW1ZdMOJ3HoRTuWkJ87kvD+O9NfgnN8bigs5G4ar9CO936j7Ou/L
6Vjvy9k478uVBd5vJL2PV3sfr/E+fsz7i5XrvS9HO6Vv9r68eYv35cE7vC9n
O70vP7LL+/IJO9yu793tfTm84X25+MD7cvzS+9z/4H36n7zPfav35ewX7y9R
nvK+XG+ncm5ncum09+X4m/fl9Iz3+f2/vS+X7bBU72Mncn27d9mX0w44kyt2
lJOzcC6XO+GC+3NwVT7SBYemtpx0ES7JFTuROye4LHfs5feTQw2ul4t+fl85
DsBNPD/Q709vr5NfH+zvkVuH4oqc1Pr75Hq7hd+v8/fyPdNxK/0MHO7QvV2S
Ry3EiZzeg8tyXIFTuViJ6+XqvTi7g+/ETeytxlHO1+B1coudc38/ruCHcYHX
4hZ5w3pclctP41b27LCsLUubcEkevhkn8vItuCwfs1O5vBXXyxu240wOu3GT
nOzBUU734nVy3IdzudiPK/Qv44L7A7jlf67+z63/+R/isS50
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 303.}, {0, 9582.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.7294371672563753`*^9},ExpressionUUID->"8b328820-66e9-4940-9ae3-\
655ac17ab15a"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxd0H+s1XUdx/GPhXXmmjubtl3Jti9Kt6thXZHiAgpfsBLR6CiUlx/pFwRB
IjjQJW95c5+UCi8IZ2jsmsr9euXH5Ud4qGyk5b4zKrIrntlqtJE7m7h+sXY2
q5Fpa53n67U2+ee9x31/35/XeTFh+fpbV74rhDB4Xgj/m/xrzWqP/Jup/sD8
yRa5xDy1VS4zF26TL2Y27A7mWftSZukhOWHmNfky5e2UJzKnPSx3Mn9kdzGP
21cyX7En6f4R+aPKs7uZb+2Sr2b2PipPZt5lX8Pss6cwlz0uf5w5f1j+BHOp
PZW5xu5pzzicy9OYg0/K05lv2DP03oh8Lfd329cx77FnMnfZs5jP2Cn3P5Yj
Ds97P5v5c+/lMe/nMD/8lPby/XK4nrnfe3nM+08yO/doL0c5fKo906e9x/FV
7z/NfM17HP/o/Q3cb9mrPQ5X7NN+LrNbjvJU72/kvcx7HAa9n8c84708c7/2
N3E/R4443OD9zewr3uOw2PvPMB/2Xh7zfj7zqlHt5e1y+Gx7pkPe4zjifYVZ
l1Mcf+rvcfErudD3v/P9LbxfOaB7HF+UIw4vy4X2v5HDrbx/xvc4/NP38tu+
l8cd1P0C5oWHdC93HNY9jkvkQvthOSxk/5Sc4jDqe1wc9b2+f873n2P/M9/j
MOZ7nL7kexxP+v7z7dmc8T3d4/SAHHE8KBe4OCSH27g/5Xsc3nNE9zjOkgvt
vyqHXn0np/K3fY/TB32P41bfL+L3bPM9Dtt9j5PdvsfpEd8v5r1jvsfFC77H
+eu+1/elp3W/hPcmyCkO0+WIi4VygeN63y9tz2af73H6Nd/jeK/vcTHg+y/w
+7b7Hsfc9zjs9b32B3x/O/lnfY+TjrrucXqJXOBsvBzuwB+UUznxPY6dvsf5
JN9n7dmaIic4vc7v4aad4TjT7+OwQM61X+U8vbdObur7Tc5fxhxwvvyA8+UH
nS/vcD6ONedrv9P5cu58+Yjzl7dn/Vnn4+yXzsfhhPNxbkfcet35OH33UeXj
eL7cxMV75XBnezZLcoLDBXKKG5fKGc4/JkdcXCPnem+q83V/rfP1/Wznr+C9
+c7HcYnzcbLU+biwIy7f53ycDTsft0acr/f3OX8lv2+/83FywPm4fND5OBxy
vvyc8+VfOx/Hk87X/hXn39Weo791Pq783vk4nHY+rr/qfNxxxvk4/tn5uv+r
87U/6/xV9HvD+Tj/l/Nx+qbzcdOOuDru+8rH4UK5wLWL5CZOLpHDat4fLyc4
+4Cc4jhbznC+So66rzofN/udj3u3Oh83nnD+3e05tNv5OBt2Pt5iZ7huR+1H
nK/7vc7H5X3Ox4Ud1vD9fufjMOp8/MizzsddLzkfV+wc99sF/vtrzsfVN53/
Rb7/t/NxfMv5eNTOcMOOuGXnuPy28/Hc0g+Ur/cvksNaPF5O5AlyiocukzNc
v1yOuGHnuGUX+NxE5+PQ6fwvteeKK5yPT0xyPm7ZGe64yvl4bLLzcexxvjzD
+fJM569rz/x65+NirvNx1zzn49pNzsd1O8cNu8Cjtzgfx9ucv578XufjYpHz
8ehS5+PaHc7Hx+wcN+1C72XOV94y51fbM10ul3HTTnDPGrkb1zb49+l+o1zB
LTvD3X1yFVc3+ffrPbuG63aO194r13HXN9xPeXYDH7vfffFpu4XDA+6/oT3j
ZvfH4Vvur/2g+2u/w/3xxTvdH3d9x/1xxa7ifjviPY+5P2486f64ZddxecT9
8S8OuT8eeMb9cW638HE7bGzPeS+4P26cdH98zu7Gycvuj0/YFVxtuD+u2VVc
tyMe+oP74/gX98d77Lry7AIf/of7Ky/8UP2VZ7fUzw5fbs8/2WUczpMTfPh8
uRv3XiCnONoVPGpn+G/vl6t4ygQ56j27hgfsHB+8XK7jUx+SC9yyG7jU6f74
9EfcH9evdv8+/j/sMm7ZCR6Y4v64NNX9cbnH/XHHNPfHY3YVx+nuj5MZ7o8L
O8c9c9wf1+e6Pz5lN3C40f2VN8/9tb/Z/Tfxe+0y7rYTXFrg/ri5yP3xuMXu
j7vsDG++3f11v9z9ce1O98fpCvfHo3Ydl1e6v36v3cAVu4knrnF/fG6d+39F
v8v9cWmD++MtG91f+z73x4ldwT12Jve7vzzg/rjydffHq+9zfzy02f3xiUH3
xy27gTu2uj9eu839cfGQ+9/Tnvl298dxh/vj/+x0fzywy/11b1fwcTvDk4fc
X98/6v549XfdH3c/5v64Ztdxyy5w+XH3173d1P4J99e9Hfrbs7Tb/XFiJ7h7
r/vj9LD749YR98f5UffH73ve/XH/i+7/Dtfe4fz//i+k1l4+
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 394.}, {0, 5322.46875}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167323387*^9},ExpressionUUID->"b3416097-92c4-4968-9521-\
9decb71a1476"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxd1l9o1WUAxvE3E/FCYlSIRBe/yloMs2OutKz2Tstsmc2Za9OWx+XMHbUt
+kdJ8EIXyhhyKKJlmT/D/rBWWRAlUbxXq6RiEBUE0bnqohbYRfRP6M95vk8X
DsaPz3l+z/v8Lt+LBkd6huaEEGb+/f/vqb9THc3HzGjkBz3L3Xg+HsIteAc+
H9+LF/FckfW8UK4O4wLX8MV4N14sn3oMXyYvehJfLvfZbfKEvUReOYaXynvq
uCKP28vkKfsq+YKn8HL5wNO4XZ58Bl8tf/YsvkaetVfICybwSnnDc/hauX4I
Xyef8wJexfcextfL61/EN3D+EXyj3Gt3yKUd5Wmc8KzzTnleSY4X4rBajs5x
zfkaecw5nnR+k/yNczz3KPnN8qcvkeODx8jXch5OeNr5LfLXzvEPztc1nS55
mVwO23G4VX7IOd7vvEv9R18hl8OuV8lvU/7ha+RyOG+SfL3ydpzk0Ov8duX9
zuUw4HyD8mHncnjE+R1yco7HnHfLkzjik34ff4sz/tH9jVE/v05fTu/hJIcP
cCb/CIeepuPZU/TlsA4nvBVnfD8Om+R33cen3cdz36CPF+Bwp76nFUc5rMGJ
fK375F3ub5Y3u4+r7uMT7uNz36TfKy/FEXfhhPfijOvu3yUfch8fc1+OX7gv
p9/d79P7p92X09/uy7F4iz7vd+LQ33TuwVFOO3CSY819OYy6v0V+2H38uPty
3ue+nJ5wf6vOH3dfDs+7L4/OO05frnbgcLf6EUe56MRJrm90Xw6D7g/IO93H
NfflvMd9OY24f4/2H3BfDg+6jw+7jz92f1vTDTvK+RP3yU+6L4fP3a/KX+EC
f+fz5Djnbbkqp1aceL8Nl+RLcJZnOnBDLjbhsF39XlzIjT4cyfu9Lxd2It/i
ffp2lisD3pfTNu8Pqj/kfTnVvE++1/vkI96XS7uUs53l+j7vy9X93tc9KdmF
XNpRrox5X87j3qd/0PtyrHufe9iE9+kf8b7ubQ274B5Xel+uT3lfLk54X442
98CqneXKtPc5/0vv6x5Z2IUc7Uj+vfe5d/7kfbky6325+rP35WQ35NIOO5vu
/sX7cvjV+3Lxm/fl+If3yf/0Pv2/vC/ns95hX07zcbhP32MXcrYjXoireDFO
8oxdyg07y+FS78uFHXY1fbzV+3Js877ccoX35caV3pcPLPO+XFnufc6zG3K3
HYabft8u5KLd+3LLKu/LYbX3ed8u5WjnM9w4w6H2v/8BcvFtsg==
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 208.}, {-4674.25, 269.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167388129*^9},ExpressionUUID->"a620f96b-174e-4935-aee5-\
57312bb04320"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxd2HGUXHV5xvErRlgxlZGmuo0hDhjpqjEMsMKCAS4hwBoCjDHAQiOOMcQl
rMmgEReMeMWAE4w61ogrxjhCpIsgDDTqyol4oSmuSHXFSLc0xw4Y6dpGGGLE
laba0/m+39PT+s+ej+/93ff33Ic5h8PRK9ctu+KQJEmmZyTJ//zlf+0zOn+y
D6Txf/C3tTLcFX+742+BvwNX53gWrn08/z/PNTeG5+DJT4aLeEUtfEzs0/Nw
YVP4WJzqHjx6c/hN8fzm8Hx8wefCC/CWLeESfkQfj6f1CZHnC+ETcfct4V5c
0m/F/fqkyKdPxlXdh//4pfApePNXwqfiwW3ht+HFXw0vxAP6NDykT8eHNcJn
xPM6xavCWbjq/Ez8T87Dp38t5ovwQ+EsvPi2mJ+FLwpn4dXOF3ecNZ3j5D+d
n43n3B7z8Gnh5BzOv8P5OfF+5+fi7zoPz9we837cG87CK5y/Pd7nPFx1voT9
9zrHyXPOz8NdX495+OhwspTzvc5x0u/8fPyg83DvHTG/AKfhLLzU+YX4Kufh
m52X8fPhNDzwt/F8+FWjOA8/Gk7egafCafjQO+N8+DXhPNwTTpbhT4fT8H7P
hw96PnzoN+L8OzvOrg+nOPl9OAt33RXnw38ZTpZzflM4xcmL4Sy85u44H34y
nFyEj/pmnA9Xwll4KJyHh8PJxR3nT3geZ2+9J87jZEk4j/nl4eSSjtNPhVOc
jHk+PHJvnA8vbMb5gY4bOsXpaeEs5meGc5yc4/lLO66c53mclz0f82s9j5Pb
PH9Zx4VveB4X7/c8znWOK3/n+b/uuPlDz+Ok5XmcHnZfnMfZgnCygn3HhVOc
6wxXej2Pk1M8/y68zvPhr3seT9zpedy4x/OXc797PY9bOsPtb3seJw96/t2c
/7nncbbP8zj5nedj/l+er3D+NffjIk6OD6e4ckK4gvMTw1nMe8ONOP/WcI6z
s8KtmC8LJ+/puLTJ/biSux8nD7kfN3SGJ37q/nj+afeHp9wfftb9K7nfK/4u
9uPkjeE05seHKzE/NZzhytnhBs7L4Tzm7wj771HLwsl7uf9l7seN97ofJ1e4
H1dWuz+e/6D7cStzP05vdH88v8n9qzouftf9uDHlfpz+2v24pbN4fu6O2I8r
7wznOB8It2Lf5eHkio4LHwwXcVILpzjVFZzpDLd0I57f5H5cGXF/nP9b969m
fq/7cfod9+PGmPtx8oD7cesh9+P8h+6P5x91f7xfJ+/jezzufpw86X7cftr9
uPUf7sfpPvfjhs7jed2Kfb9x/yD3fd79uPKC+3Ep+Vbsx8nh4QynM8MNnL0y
nMf7dSvOHxFOruT57nARJ8eE0/Cb3B8+wf24qRu4cqL7cUO3cEsnazquL3Y/
Ti9yP27oCk4udn/MdSPOX+J+nOkWznVyFfcddD9OrnU/rn/E/bh4vfvjvG7g
hs5x7dPux9Wt7h/qeEwXcfIV94cb7g/f7n6c6UbMt7sfp7oVz+vk/R33f939
uHCH+/Hwt92PW4+4H6c/cD9u6Bwnj7ofVx5z/1qe10Xc0imuTrgfJ7vdH/6l
+8P73Y8rv3U/zg+4fx3P/879ONUpHtIVPKIz3NIN3POC+/EW3Yp9v3d/lfe9
GC7g0h+9D27pEq7/yfvh7sO/jcu4MStcwelfhKvxPp3hfHa4HudfF27E87qJ
i8VwjpNjwxPx/JvDrdj/lnA73r8gnFzd8ZrjwgXcWwoXcUWX8Gad4tWnmB+n
i8yPG7qKk7PMH8/rOs50I55fbP6Y6zzOn2v+eH6J+WOu23FeJ/x3nnrZ/Lhx
sfnxlC7h0iXmx5MrzY+ztebHe3UV968zP16v67FfN+J9682PK9eaP57XE7il
W7h6vfnjv2t9wvwf7PiRG82PN9fMj6d1Ca/aZH78+Bbz47RhfpzpKs51hrd8
zfx48Dbz49Lt5o/76ByvuMP88f5R8+PkTvPH/XSyvuP7v2l+PO9+8+OyLuEN
OsVrHjA/HnjY/Lihq3hKZ7Fv3Py48o/mx7lu4uKPzY/7Hjd/3PcJ8+PpSfPH
ff7F/B/quKULuLjH/Lj/KfPj6jPmx9P/bn6cPWd+XGqbP/bpDDefN3+c32/+
uM9vzY9zneOtL5gfD//B/Hi7buMJnVzT8eBB8+PkT+bHmS7FPPlO5I/5IeFy
zF8WruBUV+N5neFbdB3frRu4cGi4idfrHD9wWHgi9r883Ir9M8Pt2H9EOPlw
x7ku4KQQLuKT54ZLeO188+ONuoxv1RX8vQXmx62S+fHS482Px3QDH+g1Py71
mR8P64nIo1t4wRnmx1vPNv9wx+O6gA/oIl5zjvlxS6e4eK75cUVX8EvOMz++
7QLz46ELzY9PKpsfn7/M/HjVcvPj6/QErusW7q+YHydD5r+W++oCznURp1eb
P+YfMj9OrjF/PK8r+KLrzI/XXG9+nOk6vkU38F2Z+WP/DeaP/Z8wf+zXrXj+
U+aP+RbzX9fxvi+YH4980fx4ly7htk7xwIj5ca4ruPZl8+PyNvPjvbebHw/f
aX78Gd3E23WOD7/L/Lh6t/kj333mx4PfMf9HOn5MF3BpzPx4xwPmx33fMz/O
dBmP6wpe/6D5cfH75scVXccN3cCth8wf53eZP/b/g/nj+UfMj9vj5sfJj8y/
gf0/MT/Of2Z+/Ovd5sdHPmF+3KPL+HRdwe9+0vw4+4X5cfKv5o+5buC2bsZ9
W+aP/U+ZP57XLXzPlPnx0HPm/2jHI7qAd+kiPqBLeF7b/Hhal/Fjz5sfP6Or
ONlvfpzqOs50A287YH688wXz457fmx9v0S285KD5Y/9LxiL/9ezXBZzpIi69
NFzCrRnhFO/VZTylK/iPuopnvSyc4Vt1HRcPDTfwIYeHm7Hvz8J57NMTeJ9u
4euODLdx12vM/7GOZ+oCLuginug2P67PNj9OX2t+3NYVPHyU+XHyOvPjbbqO
FxbNH+/XTbxY5/iQo82Pc93CZxxjfvygTrKOe18f7sLf0AV89rxwN27pIk7f
EO7BDV3CW/8q3IdH3uj3i7nuj/O6jM9/U3gAv6greNabw4N4ga7itxwXHsbz
T/T745KuxffQdfxcb3gkvs9J9oNzPYqf0E38L6eEx+L7LbQ/vFeP4yk9gben
4UlcWWy/8b30VLxft/GjZ4en8Y5z7P/jHY/pLrxTF/D+JfaPey60f7xc9+BM
l/Cssv3jUZ3iu3U/buoyHniH/eNkmf3jfj2I67qK03faP27rDOfL7T/OX2T/
+MhL7B9vGbB/vEuP4gO6iScvtf/4vpfZf+zX4/E+PYFXvtv+I/8q+8c1PYUL
V9h/fH89jbt1ckPHY6vtHw8M2j/OdTfuudL+8Wrdg7frEn5Q9+FJneI5V9k/
rgzZP75GD+DNuoJnrLV/vGGd/eNMD+ONOsMP6xpOqvaPZ33I/nHPdfaP5+tR
XNJNPLbB/nH6MfuP++lxnOsJPPcG+498G+0f79BTeJ9u47aexgd08omO59xo
/3ixLuDP3Gz/ePKz9o/36B7c0iVcqNs/TnWKM92Pc12O933O/nHyefvHw1vs
H7e/YP949Yj9x31vtf94v67hvbqOX9QjkefL9o/rDfuP+R32j2fpMdytc3yl
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
O3UZf08vxw/qATyuV+DHdQX/TK/Cu/Ugnr3W3z+u6CpeqdfjVXoYf1BviO+n
M1zXG/E2XcOvXefvH4/oOr5Vb8Fb9UjH6U/01o6zQ6r+/nn+ML2d+Sv0KOf/
Sd/N87df7e8f36F34Dv1GL5L78Tf1Dm+T+/C39Lj+Gn9GD7iA/7+cUHvxq/S
k+SZrfcwn6dbzPv0Xubn6yl8gd6HL9RtfLk+gN+vp/FafRCv08nfdPZfrWd0
nKzXXcw/qmcy/6Qu4JqehTfp7o7Tr+o5vO9busjz39fzmI/rHs5ftd7fP8+/
8hp///hVuhfP0n34FL0QX65TXNGL8Urdj1fppXi1LuNBvRyv0QN4SK/Aa3UF
V/Uq/AE9GH3oIXyNruJhvR5fp4fxBr0BX68znOmN+AZdw3fpzXi3ruMn9BY8
qUfwHr0Vt3QDP6W346f1KH7ph/3943m6id+gd+Bj9Rg+We/E/TrHb9e78BI9
ji/Vj0XfegJfqXdH/3oSb9N78OO6Fd9T743vqafwJcP+/uP76jbeqw/gtp7G
L+qDeMa1/v4/3/ERegaerbvwHD0Tz9UFvEzPwjfpbny7noNzXcQP6Xn4Yd3T
cZZd5++f+Rkf8fePz9S9+Czdh7fohfhXOsXP6MX433Q/PnyDv3/8Fl3GC/Ry
fJwewIv0CnyRruCL9Sp8iR7Eg3oIX6ur+Dq9Hn9ED3ecbvqov3++5xev9/fP
87fqjcy36lrHea43x/fT9fh+ekt8Pz3C+17UW5m/8mP+/vEsvT3++dOj+Ch9
Ny7qJp6nd+AePYbn6524pHN8gt6Fe/U4Pkk/hvv0BF6od+NUT/4/7/l/bv2v
/xuFWaIC
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., -3951.9660644531245`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 1272.}, {-6527.25, -4074.5986328125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167461466*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzkvQdcns12H0gkpO/77vUtLtm1nU1y1/Fmk7V3ncRJ7MTrvbbjHjtxvff7
6C+9V9GFAFHUaCoIgZBAqCMJJIoKTQgkUSQkOhIgeu+9wz9z5pl53ueFF9D9
Ze3N77foxyvpec9zZubMOWdOm5k/1x1xdvDQHXGx0/3gj3x13s4udn4/+EMv
X/bo4D8wMTlQb2LyD679wIT+DRMT+aH/aaQPE5Mf8r8OYn5+HouLi/x/eqAk
Q6C6ujq0tbXtDfT+/Xt8+PDh/+9AnZ2dewPV19cjPz8f3d3dewMVFhait7f3
v7O5/1HptCvQT/O/TLG1sYbZ6RnMzS9gC/hCvLu6vIQZ9nhhccnkS/FsbXUZ
09PTmF/QPltSnjG4b31Ou9/jf7HXN9dQV/kUJ6OO4YifH/wDghBzOhGVdW3Y
AA5ysC8wNzmE+zfSERYaDD8GFhgUgrikFNS19bLOKzBb68uofJKDiKMh8PXz
RUBQMBJTMtDeP6GBWULF4wcGMEkpmegYmFDHYrzfPuLb9Y1N3C35gIjLL02+
jeNXXrFnkVde4cS1anzomTT5rjI+5a+vGF1X8OR2CmxtrGBr74rYU3E4FRMJ
e50VrO0ckF/RYHJAwM6OdCAm1Afm5uZw9wlAfEICoiNCYGNlAVsHDxRXt6iw
2FhFwfVz/DsHZy+cYbCRRwNhZW4GJ79wtA1Ma2BXkJ91FjaWDNbFC3EEG8pg
LczgfCQcHxjsF3sO3lIz+HulHxDOBv99GjZ7xkiAo5cqYBFRYPJT+CYsnz0z
C8vHXwc/QmxmlSFBfgVd70rgYGMBJ/cgvG74RMzGmaC65AGc7Gzg5B2B3vEl
9nAD2ZdOw8LCAiExSegemeFd2VhdQOnDa3CwtYKzdzh6xhb48/7WV3BhRHX2
DEFtay9/trY4g9sXTzOimONU6n2sbynD6Wt5CWcbSwYbymD7+LPVxWncSmaw
ZuY4nfaAYE0O70mU35Aysr6BjIImHGNE+WkiygGiyfe05EmtgCUjz89I8hzL
h1VkIf0yHmL/Y8++Yc/o+f2yD5Jk3xGyCazj9oUTMLe0ws2n1Qel6LDHN5Ki
GIWskVvZCqyMITzABd9YOOJFQ58KtrWCq3HhDMwK15++4V1/nJkIc0bYjPzX
Emx5oguhPo6wdQ9Bx4hC08KMBAZmicyCqoOiL8vjnxDiTWCh6BxZ2JtCPy++
3dzcRG55O2ebf6ShS0hKBR/9Lxuhy8/wb0w5XczDC3CtsAntfZPfQlvPBAP9
NDCNDcaN1IBCJxMT6uMmOj40obqqmk1eTU0NG1hNdTXeN7ViZVPp1ObSKGLD
vGBp5YF37SNSM7zKucRIZInUnNdcYDrbGlH7tgHzS+uq9njz7Abnx7i0QvZg
BWejgmFp7Yq37cMm+llZRfppRm5LO5Q3Em8tIeF4EKys3VDXMSLpSGCXTx1j
YPZ40dS7Kx1XVRJu4VFFhwEJw1IrYcnIRcT7RyRzRK6wfJWM5sfyf1lLxWMF
bCYbiYrfZ6qKqMhoySnJsDMMeiouIykqCD/+8deMimzAbFhmX38N1+DjGFtR
qLgy3o0IPydY2Xqh/tOYqehmxf0UQcVXQp9+gbrSW/xZPKPaxtIIjge6wNbz
GLpGl1TKPr2WwEhhiVtlTdhaHEJEgDNsvcLRPSZhDuJJZjyDscKt0noDyTRY
lGc0mirrSTOOpb00OYTI9FcMDalpopmVQrPvcpIdVEim/DJluZOM7PcfCyH9
+mgeEm+/wce+SSbqH3qJhuzf9C/+v++JZx8EXTcYXX9NQ9cNvH1Zhpzch2wA
jx49YiR6mJuLJ6Uvsbih0HWquwmBzraw1tni8oNSyVVba9M4FxPMxm+N+y+a
OOjs9CS6Pn3CzOK6XtZXkZUQwcl9MfslNqb7EO5jD0f/KPRNrUlqVz5QeD09
vw6b07045m3HQKLRP71mop1Jc6YyLj+qFtQ+pBpT9DdRvqurS6F6h4bq1wXV
v6eheihbH8zD84msh7ZR2FKh8D8RFE5/1CApavKLkpq9k1heXedt/K1WNf4i
Jhm5Ahi57OzsYe/ohNsFJRgaHcdgXxduppyCnbUFXHzZKjGuaLRHaUmws7VF
dFw6uobG+LOluUk8e3AVTvY66By8UNMxhs3ZPkQcYWqOrUbdYyuScJK9rxbU
YWuun0mAA+y8Ixn6FZVwL+5d5IS7kldjQLhnz55xs761tRX9/f0K4ZrES1tb
W8ir7OTibYqI9JcGhCsgan1PirJWwsMLvhKES8utVwn3LcmajC3ls++IZ539
U3yaqF0/LTG/heWxTzjGlgDvwBCcOhEJS3MLuHp4wdXZkdkkFnB080PZmzbF
rPguXuWlw8bGBva21nB288LxqGiEBvrBmpkZ1raOSM99TiYcVkY/CQ7bxoQp
KhNuTPUgjEACtjOhQsv0RzUGIt/R0aEX+ZeCyJuMhgUvGQ3TXhIFuZL8tqRl
OhP9NFX0TY3T8qcFLX/MxPzMjRpGv0nWLGM/zoQT6GC0W1vfNDmnpdtX2Jgb
ZErNFW7BsegdncSrojycjY/D6dOnkZJxkxugBwXROurLYG9lhZCwE0i9dB6h
wYEICAxC9IkElLxuUE2UjbkBHA92g40rW46H5iXRCtLPcD1553kztpgujQxy
ZSBsKR6eV4mWf/k015N3yhp2t2DKxBcbbGm++ayFiMPsRSLW4e3E4hRiQvsd
QR0hsfx/hzQUO329mtPqpwXFllbWIX5M0rQUYx3dWsLFE0dhwRbFNx2jSs+/
jcW5aUxMTUv+xHRvM/wdLREcex7kNC8tzGN2do51GibqQrq1iAsxoWwddsar
1gH9MryMSyfDGCEcUNFMy/AKzkeHMDAXVLUN6t9eRgp1xNIRlS19u5KrYDu5
UisZoRTeikhXDGAhp6ZGyPQ9aeQxal7KeU9LMHvxo2CsSUaqNd5AjkKm74re
vc67Cgtmu56+fJ8kSbXnN+dwgVl0Ht7BeP9pmHdwi6yao16w9QhD7+Saas8X
3zrP/YkLt4tUE2VuoBUB7vZw8glH/+Qyf7/o5jku48l3iiVt5gZa4O9uB2ff
CPRPrexKm7sa2tx61spp8yWnzUEtXciI4EQQwiZEUHlG62/Kg3ckYYxJ9ITp
5BK3YfJYS5jvM0+pHcGeDlzN3C4sx9zSGtaX51GWd515VkxTsZH1iZExNwBX
z0QwA8wR9wpK0djQcIAGYfIL7PMd6ps/YmlNkbqJ3kb4OOtg7+SDkupmLozT
Y71IPhHB5+HctQIIKxLjPQ3wdtIx58sXpQJ2arQHF04w248R8nxWIcHuLoE3
xGyQ6i989YnWTHIqueri/pRCtq+MUO0LjTlyMqtab4hwnS+ptmlSpVBN+tpN
NUXwcLLnRoR/8FGEhQRw/1Hn4MJsy/cHRU+f37nArVxLZvgdJOZhM2L2zY9h
5RGK7ok1Mf5NvMi7xt1YG1sHhEVEwM/LDebMe/I/nsD4ZUnvfjLY8keZsLch
WEcO60uwjKIBUYkYYLC7up9XtMxVpDDXQf0yyfWU9XGupw4aodSXGkqduFZF
KyJrS0+pxWVF8OoUSn1fqNnBT824ceUiTsTGIIota4nnU1Hb3EXOqokkU29b
La6kX8G1a9fY/8RnZgaysh9hcnFDDJ8NbGsdLW8rcSEpnuGKQuyJU7ienY+R
Gb35SzDNbypwIVEPc+NePkZnlnYPS1zSMtBrhYHCtzGQGTe4FH0UUSi9AtY3
cwOykML+SpBFkIQjb1XI8jOiC9jaVJ2un5UTs7EBsWapXdU++2q37p8TX1D3
Hyv8L2ZW8WzErJpsn1ZzrjbY5wGxAiXff8etHP6rzKlJv9LxH+7WeJyGrW4z
tjqqspVh46b7EC+W8xQp83aFp1gfOgemsLq2YTK8Tx+i+T9NlT4Ut/IoAVMA
pqIbofopNNqNg4Y0qKMe8F9Jg+l92g+RE8D+PGb8QybAF9saJxocNjIBmsYP
4sI9tXFGHIUQncz7YUTgTczt05Ej6mRs4U5xGzXO8BzjMk4MrZmQ7WsI82nZ
6Nm/GOjXYXkUcOLj7+ibPGikJys7e2LgPfryfx5SexJ08QXFtch9NjoHX2ia
jmFNt/dN0RLGuIGtY7wDqoaBYdPkETx8+BCfPn1SvnIXX2waEoHNySFOhFAl
xCbNVXXU5NXTs/N8EqYOa5pe0Db95c72ySMZGBhQvndU29/c1r4p1yyyfUYK
U8F0chJo9NEZr8Wy3aG0z5agTwrlFfw/s5P0Bla8jUYiP6t9DRMwQhyUM8GE
Mob1hcx1MX78wj789yONIDyt6kLYJRIEavqgtlmT/drlNGB07xiYOiDJsH0a
fnGfvvwV/+cXnA3ulrQhhLXPekIKisnAY6OGlGE/8uVckCKS/ejY3o8f7NOP
P9PSpLqLr7sHuIo4yPsj6KJqZ+NSkY+oq6/27cs/36cvfyxoQisF9YVoESZo
YiNoYmxuDoh+kHicu/uW8yTrxyGaIIVRDfvxq/v04w/4Pw+zfkD0o4IvtKIP
B3aQQk7LF9zwj2L+vFwfqO1Pg9NYkeLx7z+r7S+4OnE6+YzzGw+faBo7IDhB
jpfIfYCak4Nd0gz2P+7T4O+JwWaXfEBIyguuhENTKjgTsgaVtvjSgLNKW3xg
XcqgOIrf2acJ5XtTYQF0Eu/QaqfQ8bDqfkr0XUN61L+/D+rfFuQibUJiFMx6
HiqmypKJM2nQA7TCCaeM2JTWTP7yH+2DXCHddxlpGGK2QhAfUiibq2cZ1mLz
Qg3Zxz5FS/c473ynnuEET+/exm9qaEPGnRHaCDaXti63g+jnz3aiZquMHvW/
2yZORBdOm6jttDnMaUORetJjxK/dQzPqHGxrh1aU3NxcWlCVdn6df/EdvqLQ
HAQlv5CiYkiiGIVEhJ9YaEHOw1/sbKCoqAhDQ0PK90pk9StlIExvE3sqc/GC
I9bIh4FsCEIpSP56J7UM1qVfFXIgFTKZBDTZBkL/pcGESJmgwfQM6wn2N/vM
+f8h5lw2FXChnMahNPGVXtRZE8I2U+amf5I3oy61P96nnX8hGIACZpp2tJEw
wQCHDMZCE6ROjtk+jfwS/yell4UnIH4k1xE3WBg2quE2kvYZ9AxpRmW5T4P/
hD7I6doSVsSD5x+pFWURZ/QjtqBZIxHd3uJHxVJTMOn2aekf838eQg5rIJAN
g4SH9ACbIBEQO6xOFulpKUDSs7LbB/8vaEdC9Cqq6aLw+Q5XyIIvb+oyjKQ7
bzG/tKpgcdinFenUbfEJ4r8mSqNfquQLTC7nFggnnV49HOBtmnJKkm1KHMg0
w0HScgyjYEZ9U/t15afFFzmyyZQK9j/lUyGs4s0fENEPqTnsYp6gpWuMayVi
TnXsHvs0qERETLkEFNV0K7mJY6qrrNI3gguCAX1VHN77tPFT/J8aWjIpo8Fo
6Eh/K/P3hUpLWum6GQFpTD3Ds5T4UPD57NPet8SYZHv+55/rtcchlWa2nGbj
NEkMC2uFfXYptNPj8t/ZlsESIlN7JW96+JiC9JOk1SAq4RKJcFvi5aOGyEmt
P3jwAO3t7cr3SoDl+4IxwSeplDUUJIhHMmsuMkdS3VLMnyhHrNc7MivTRQjb
2VZJSQmGh4dNlDDGT3MBk38k7UgjkpKX82VgaWmaJEU1vyTURuROosmVRCHt
V2pb1E7O83beDrURzOQrKLmca5CDGibXuLmIv1UrmFy0F7U7QyyJ+SECStLR
L5+rZEVTmcplRbRB80e/pJTp/9QeX+4lA8bs3t6C4D0aW+mbXmWpj3qsDYWL
JhhbWCr8TiS8XMmdRJoxmrk+9rfa3Indm5sXwyt928vJZmSKDNohh4W4Q7ZD
w1J1Rdzu7fAIygGaNTJj2NwRv/NIxDZ+4PNzs5YLUu/IDBfgBTlPZ3dvYJJ/
fkcMRJmbIDFHNCgLoSe0bShzIhbF5N1xj/PPQ5znllfX4BFXwj11c1WR6lcp
Eqk4hrtHwc1Rp+yOelhPly8FL5O+Kef8bKM4CHLCDwim5izFmlBX2dTd8Q/y
z59S5zdQkCWQGyo8pcI1gLbrjPQHaIIZqr7RWTmKfZvqFzOgUim+hK/Z5qIc
RyoaCyEhtFIQO80tCvbJ2B03L0JifkLp2x7edRrGTgoVCvHI52EOsrOITecV
Xw2Zu6PvEc9I14lui9jkFxrK1DCGmeYkIc5Xlcf13fF28c9voeyN0m2a2O1d
pr8FGTi62zvRyQVDCa99m1NYlZ8wpRxFdvOM6KYYudLFO4Y4SXffv38fHz9+
NPkocJJMkntBOk5S1kBmts/WvZ04y8rKMDIyImLdlKEU+rn8I46ce85JsF3B
aJhObxHf30kDqf9bNAwdIEiqZeTtpr0QFI42Z/eZapLMy/4iLvBMkMxboNe5
Ig1JZCGVTjaFGnXI3R23Url8iKtzpcvPJRcIZ+oQJ+2nwSkMjM3xXxXvo93x
NvDPr3iI1Uv2N1zLCoqKU8lauDuu96KPxAY0ZcW13Zy9SONIh4+ESnCpgu/x
7vjeib6ROvNjUx8gpp4vi6yPcdv79lTBJYtoV5cXMDoygrHxSayub34hHi/O
zzCLYwgTk1Osq5CPF+bk42nKFO7y2Fj+RMlWfYmS2h5YCnNEYSNFOokGY1O8
zBxFShdlDnBrbQkVT+4jLPgI3Fxd4e7uiZDwKDypeIu1LbXedmN5Dk/vZSHA
1xuuri7w8PRC1OnzeN8+oCatNpZn8eTeNUOYM4Yw6wSTfQ3+GpjoMxdQ3zFg
NLH1Vjwjl9kroVTE0IjnDnIOpuIrymxqh6YkhX8Om6sLeHAlDlaWlnBy9cH5
i2m4eDYOLg62sLDW4e6zGtUXJTLcu3yacpxw9QzApcuXEX/iOHSW5rB1D8T7
T2MyfUmg2WmnFFCvQA4adyKSg9p5MNCuMRM97CLupp5ksOYcNpVgYwWsZyDq
u8aNpjpr+ee3VB1Jeseah6oKmdAV8vDIwPgcBsfn1WhCsXb0v4KPNY9ha2UO
N59jqO8ckuNE4+sncHPUwZ4XbHLLCT1NL+BobQk33wg0dY8qkOvLyMu8ABtz
c0Sdv4lVkejubiznsO4MtlmFXcKjjPOwZrDRF26psF31z+FgbQF3v0i09Iyp
sA+vnuOwMcm3CdZoTrxaklCQQOobM806n3DrDTY2trQVLJoi2TVcPxvFk9v3
yt7p60A2kZ18AhbmVsgu48oH+YxJqPr1+tNaCbY204fwIy6wcQ7EhwGesEJe
+hkOduPZGy3YMQJzCcLHQQXsUdoZXiR7s+itrJxYm+5FmJ8zAwtG+9C8seFW
ieGSbaAdqho3CNu2cj1XhmuilBE2vatBUVExo2RpaSlpguJiVNbUYUmUEW4u
DCPmqCcsrT2ZrI1KcXytFrlS+8tIjApiIO5UB2uiLSvOjI9khLRFSX03qIA1
/nggLG3c8b5zVAuWERfBwcoaengdTlxkIKxsPKggVF/nStUXSjlsWUO3MVK8
FqRYWVtXVwSDBTFC0byzCysKKco1pFjG2f0qVce6RKWqJ97pSVF+7yInxeVH
tazrw4ikqlQvw6rU4htJvNrqenEDtha0VanLKkzR9UQOc6O0kcEMItzfiVcN
9oxLmIN4lpXAK7JuFL834H1pIr0SFFBEv0zG2FW3jNZt8o3UWNgLDQU20VxX
g+LiEsEMjKdKilFRxZhBiOVUVxMCnWxho9Phwk2lLOWAmMb1xVHERfiz7tng
UdVHbM70I9zXHg5+x9E7uSpH+TInVaFW3htsTjMQHwc4HolC3+Sayc6q0rcM
hgmKjx2DiUb/1M6q0vRtVaUUAKiursbr16+JL0wqpMBtbMI7sZTzhNbwEtTg
w6vUKoLv8QraAGc72Nk7wNbODpfvPERnTx86PzQhjfG1jilJj8AYDM2sYmOm
F5H+jnxSu0aXdwzlChvu1tyAthTUZEctKBvuT1oL+uLFC9pshJ6eHoyNjYnh
HuZGDGXvzETRu9bEfmU4zJXxLl6s6RMchnNJp2HNNBVVwNrb2sDMnOlgn1BU
t3TzV5XCTjapR9ikTq3qhynUweV8plen2Ix5q6XC+mHKMs0CKtPsVco0t9UK
v5BlmnmGZZrt7e38fxUCF3ehmY1GCo+i/hbCVhkan1f4+rV2jMxGnB9CVJAb
XAJiMDAxh/qqMlxNS8XFlBTcuJeHwclFwcim2GSw0SEesHZmqnlgVnZfKYa0
xN3yZr5BIirEnYO0D86pQ8xjqzvBZL9gdvryKI4Hu3PV3TGkL6p8xFZ1EuHs
8kajy9dz/vkt1RQl00yu4lKvK0tYLRkwO0dLDa0g7fQxWFjxEkXZu6nxYfQP
Divr/tYyLp0Ig6WVI1409uh1tqyntHTEy5Z+rnWprJHgKpp69WCLSI4NZWBO
VCsJ2l5wMZZqJ51Q2dxvWFIZwjrihNdtA8aGWyaGK40V+jXmJHEGXlAYWFSj
yeLGN0+uczsp5gIzNrYgFRLWphAfHQgHFz/UdSh2TPn9VF5/l5CZL4cy1dMA
P1dbuByJxOC00sDze5c4WOK1AhWsux5+LgQWxQWefsqyUzhYUlahHPFk13v4
uujgyhh7aHbV2IhLxYgpPGgZWaiKqKXG3eS6WlmpeEvV2hH/ChYmehDu58KW
SDtcyWYm+vQCFmcmkH87DbbMbHINiFE7OTP0gddo6uzc8bCkBourqxju+4D4
iGBep5lyq0g1ZmcG2+AvYB+VCtjeD4gLV2Av3S5WYacHWuHvZgdbew/kldZy
2KHeNpw5FsRgmWVwp4RXuRkjgWJxfpvnp8jVshDRQjl87nqxf9Ny1T+qWa5q
FDpIH6Sj6SWOeLjwIkN3Lx/4enlwTnBw9UKRrC8nv2cLb0ruMftdxxhZB98j
R+Dq7MBtsqOnUzAyt2qiha0tzjYCa4mjZy5hdBtsTdE2WCcFNiwuFWPzq0aN
dMXZ+yku3lShLEVck1Pmw0/gw5/DyOSCuka9USig1BcexuRQNx7evY7z584i
MTEJ6Zk30dI1rJYDsh72tL3HtSup7OtEnDufjNzHzzGzqNfLBNPd9g6Z6XqY
h08YzNI2mFZDmEdPyjG7tG7U+3osukcFDsTnPkml6gjNqN5LCeXRPNPOIXV+
Fb/ZqEv9WIgNEcL1dLEa+TEUm0Lu2Mmy7/e7o3siWCjp7lv+Oukc7ihp6C5p
Xr9fr5T8hXtcMc9wDjL/amhiHsPKtCkja9wdhxKXOMTNVm6isJE5nHiKGWmm
tuz+Lo+P8O0yjNrFjI98zypWH5GDKC7LBIzgkEZjrni2trGB+2UfqQ+Mxf3O
ljGUWsfJIryQJ8om55aNoSRzJDs7m7ammDzgz0yp4pqj9GLDYpNzUNR6GMwZ
EZzNmfRGjWAlI2d8fNwkmz/7Hp9ejvm5itkgnkhsRfMpY40Jt2t5VEmdjNad
xJAWxh1NGw8EfqKppUhm6Nsq4FkHioWSfA6zCedyui7a+LD7pN0WzyjY6JtU
pokyHd6Bn6JEcv/Dp91R3hLSQU4vCRtVb2m1Kf2bkoJadN27o7vJP7/iVKC0
pgwhyJWYRk3szVApo+3dHdcNISKcmgmlqpYzD9/mjQ3sjuO6wEF9UdKDIs3E
Y5IFRHkFx+DuOK6JMUmelGkqKf30NykPlUv2wJUhntFiSOPyjC8xOSDS9jJO
2to9zhbmRb7rgOMb2g/flzwETbFXorPKCdSvO3qlNrIfGoVMNmLK5MyTo6MG
vEZ3x3FF4FjlZPqgZvJ0jEQUPVqWUz6+Ow5lk46SQZZ4GImk2rdgXbJmvxOz
SwqqiZ2opHJKFYxNZgIxtrcReZcztyJytdvQkQq5e/cu7ZczuSTQkerg+UnV
+NKjjNBTi6Ob3ImusrISk5OTJimCp1QjJlwfL6deESqSFTX3bqSUWmqei5IH
mAj7ni3lPE5UIvFNvKVoMJmNnt2d9gqaw7gn5o66QkqmVzOi+d1fvyCmn0Bp
g760w8nDso3myl8ZycLuOM6LkdB6JOdrt7naA81ZQVwSWEUJFXKiaF0CSkep
XL24O64k0SWadw+2TltrTC2Ja3peWdeWd0eTqM7RJtdlipwWyM3T3GCVbraR
EnFDNF9wtpFyqhMLFhFncWVNu2nbKI4EgYMy5bRAUdmHLvoxt6eYYOmpsrYf
jkOGvMJwqanVjd3fjZOMIpYIC5EyIEahfoxNL+2L4xT/VGy6VWb9FDF6EFm1
s0P/pnIZyTBG0EldcVKgI3VDxhjFAIlpFDOxUNXMVNK9LkRh0xAdCfedO3fQ
0tJickKgIzZWdEWBujTrTQ2ld6Tl6GdrZ+9evnyJqakpkxhBbDJ0aJueH03a
Mb48s7WDyRZTmLQOEQMMTyyoPcROlFJlRIs5oAG7nSnmS4eNMP5IWfYOzzLU
EzNLJgfV5YPe2A2vnJcoweZyudWPXMwv6ybDqkdzaHdcx/nnV7yPFho3l5QJ
WZN8yIyCqorcD6FSHXMYz0TnLIT8UecY8x/A5Ozu4zXdHW+EICZpPW1HbfgU
a+wC/vPV7ojCxTONZ2silz7OemLj02chOyZ6RZpfcgz1znivvr07olAxD6RN
ydMoqu6mNVl1FsgGJwOWXAk9wp/aHWEQ/1SElyOsURB6xAupE9qeektrl/rz
3d1xBvLPb3PSbcdloRE90rW0O01VVPshDhCIKeJAyVjysSy2yTJxpC7qCRdA
taiH/3xvvx5/xS3Zb0Q9KEfEfml+yC+YYg6TIVm/vxOhVGIBYsLJkqc6DzOx
xLQxzqEVyhDRzxoiIvV1+/Ztrr6Unpni5tMWzi1nNWqK//zDnZ2gqPn09LSJ
spHqMJ9b4jwqUHc68YzbM/NifeM//9NOHFI5+YmBEF/QPJJG1peF5VMK0mRP
RJLEyl4qZk4wRFZCnVuES0bIUzq1tPZZuHwELjKyiA/0vm0B10TEVDPzK3pc
//N+/TqsTj3xEFfemnAN//n5/fpziK8bVKslDYohA+LssdfHS1CZZolWFZJE
2ldOg6FgxIqBWt0DkYd4Rghoul1OPWNai00ae+ZyuohTZn5RKxXinJfviR7Q
0vyx8S3u3bmFK1eu4PrN2yh9UYXpxVVNHEnC3OQwN1SYNZNDgpwj3R+Rk30L
6emXce36TZRXvcPy+pb8eljzddYN+vo9fW0sCqXshDPlHEjcJyx0WdBhES4Z
cW7nqOSxW5src7iXcQ52OmtYWlnDyYkyIzoe4wsKP42O4Sk1HrixMovsq+dg
r4G1s7XhsMHhZ9A5PKUG2lurn8LP3ZGHSh0JTmcDCysbRJ27hqnFNQnWUvUE
fm4OBmCWDCz6/DUimrHoohv/VBIIgULVyVAA1ezSRhJbZqBRMfmCVmwMRv5P
8Sovi5/A4eJ1BE8q6jAzN4f+Ty1IPhPOg6xB0cmYFmniykfXVNinle8wy2D7
PjUj+bQCGxJ9ETMCdmbwI4LcHWClc0bWg2KmHefQ1fYOMUHePPeT8eilStGZ
wQ8M1p7BuiArp0SBba1DdKACm5n3ymiE1V2Qj+xxKZrEwBSaIyU6ObdkKKL/
izJ2mUHZWplAdLAHfvy1Je4WqzUAa7PDOHXUh02UHQqqO4D1aUQFuTMwK2SX
in3vX2F1dggnQxWwwmpeYsaoqZzAEHc5V5M2/QrDH2rg5WgD18BYDM0qs/Hy
0RUOG3/loQbWFENt1fBysIFb0AkMz60Zi6xLlqf6XNJtxPLkI6k/YruewodY
XJjn+v4wZmZm2ABnpqcxO7+gnk2wsTSJgvtZuHT5BgYmFtUkbu5lHnNPuPaM
+TkzyOcgNzE4sahJCaZxmMTMZ1zs004cY5xrh/ImTbZpcx5no4N4oqrmAxWD
ruNSLGWl7PGiuVdNI23MISkqkIG5ovbjkLFxuwrtQMb1s+ouxQoWhfayDnXH
+FeQnhQLZ2cX9qKHhwd75ubigpATiZhY0e83b6i8zwdy5uJD9SSq+op7yvld
qQXYWpvgFRLbk4GPUk/xRF/OqzbmyI0jKtRDJAPn1GTgw0snBUyL0Xy+ixgW
LX1k4FsJO5dsIuJl9ed/1QxrDQ+y0hB5PIq9GBMTw55FHz+OxNQsTK/BRJ46
QFvrxY/67ElWIk/RJmY8EUxnDO4LPM5M4HBns0qwTpUsPjvTvZTK5ZnvAuVo
KGPp3vJ7ydvSvYdUD6yiogLl5eVobm42cRTwpNKorOHro/mqRU2rJRlZMLCo
Ddl8k41hfX2dysjWKWGxrjWD2Nr74uEdhB89itt5lVRWJGWzp7kK/p7OsLK2
x6NXnNFQnitBX/IKJJlt7Gl+DX8PgnVAfnUntmYHEOHnCDufSPQYOfcpv46B
iFy/z3H07pPrJ6agsobx8XHK82N2dtbESTAHneZGTGEfSx7VU75jUwaKtMyh
KPZfQMnNs0zCrGBnZ4fYhAsofPwUd66lwsvVkfftaFw6ZpYVFVB0I0nA2uOE
AayDAht/BbOrxN9dojDAkAvU+gd5QJiPHRx2OSBs+9lMHz9+1AjBIe4UWPIS
nhqMTy9RdFEz47+kHeRXaK1hdriNDbx9AuDnwyTP2ho2Njq2iLoxUbiFoWl5
rsh30VLNVkZrG/gQrDfBWglYdySm3cLwjBIYWp3sQfgRtghTdc/YkkFxDxvj
tWf12JwbQDhNu3c4ujWFO1TcQ2O89vSt0YyosxgjmXBU1CADwCNTC5ox/jPt
GL/EaOd7eOkscOz0JYzNTqOtpRHv3r1Hz8AoaXCpZUc76uDJwMIZ2DiBNStg
vQqYXF1oMYuLDIClrae+7ooU3gayEo7zup5n7z5xnX0mwp+BeaGha1xfnrWB
a7zYS8fAOo2N0VHQiyxM2rhHCk06d0k7IgAGYzVlaqYfxwOc4eR/nK2TakUs
aZ9If2c4M+0zPLd1WO3NJu5fPCHK6erkWKi0IzLQHTonf7QNKMeA3kuO5TNz
Wy7zptiYH0REgBsDC8CHwVljY3EQYynSKGbp8NLf/aOzmrH8snYsh3iRRTIV
Vdh4oKqpG8vLywz94uIi6+Li0jKV9io/VD5BVRU6D1Q39xCcAvbzBmCfxEGo
PsEnmKoRi8LWGoqzr0DHjK/w+KsQ4ozOumJeWOkbcpLpHAm7iqK7V2DDYCMS
MgjW2JDtBREVx7Qc3xzNV+MuxK6R2+1JMWq5Re5JRgKsmFXs6uYOb2/vA/Dy
8mJNeHq4wefYGfRPraqGzuOr8TtBv8NBfcPjMDAtWllbQOa54zAzM4dfUCRy
8guQfjEetlaWsHXzQXXboD5Xz2Azzkbyc4X8giORy2AvJ8dDx2Dt3HyZ+TFk
1JJUJvowsyTfGPj35FsZjPZ/0472IJpfPcKRI0cQHBTE/hfEPwMD/BEUk0j9
V5fXppcPjcIFxyRhcGZdPfxneXoYdzKS4enmwhW3vYMjQsJjUVnfoSrbJYK5
mgwPAeNAMBGxeFnfaTRL7yD4kYxF6XjS9lI6bFI/sH9uOLDNDeZoLi1xpjXl
n4exvLLCU/3yR8AcEpyt+dpEytjs1AT6+vowNDzGBH/jC+OPjdWs24kZWV5R
PF46zIkCkuey69QkMv/535WO/9AIDluBg4JgVEzgyhxcp5NFCE+rNIxv/Ivd
cegE1bdEKIHkQeaAyPQeGNO6lXsgkp0hJDK2QSxGRwkYxDX27YwSFNXavkoC
UhNI/pe747AR7ED7Rah0gAZBCaiBMW0s4ld2IpDWqrXoBCl3oqhMPIuAxq44
yOS7efMmmpqaTKwEVcmI1ypV2nBG8TTDRcJIZ2pqajA3N2diqZmeIBFHk9ke
UlWGsQwjJ3ZI88NKkCVBaAALsVwtGMQe/8/d6WopEDxjzEbzKoNghgGw/2t3
BOZiKJS4J+7kkyO8WiXGs/F5iMwkcWu64HKqCM6nnqklwiJMq0H0a/sjkqaK
hcily1ky7NEeiL7RTLfM+lBPKDMQdfX1tln6V/shOqw4vkKXEW3GZxa1qQDg
X++O42sxUaRVKHJAtcKUUpmeX9Z04td3R/Bj0QmaaaKvLkqfgx+aWPgsHD8S
FCG+VcibpxGAt/r8++chOow7xa1qcZ08pUDs0VZ+/u3uOP5W4CCJluFy6hDV
I2iOd5NHgRjVCn8jcJCjFXC+XOXcHf3YdnINaYUbN25wrfA3YmbocA4bDZv0
GZhZv7GzE7W1tXRXhslfi05QtlQud0SU5AfvDBcNIzikIlA6YcpjvD8OFawx
t6x/9zd3J6R8l04WUWZ0m0rc492/En0nc4MIRpk0O6ZH6PxPg9jGHjj+UuAo
fNnJT/2hX8cTz/h5DLMLmkn4D7vjUE5RUTLOyoKXpy54RE/aM/tZiGRnZFLf
8cRT3iE6gXJBy1X74jiEwledvAN0+CClJA3TI3ucTfQXAgGNhsxZEnaLY9sj
77+1Xw9MkVv+EQ6xT8V0rH/Wu38h3qVThmn0NHIDefq/93+XT0FYHpeFQW1+
bY93/6sYdD5rV9nfWGBE8RtBIIX5v4ipI2uOtBNRjeb+IsmRdvDbcJAwU8D/
7du3ohNKWN6ZTXsKEU4rg7+9s/03b95gYWFBDF45EnhTsSlN9nxRCq8e6O/l
ehTZTyoG2dj8jH4azpAp8is7+CJIKl9z/vGe7yqTc0idnB+FPuLa1nB2P6Nx
irTQ+pWaW2+oYfZ4V46YIk/S2P+sF//fI/pnAf0X8YxK6ykxa5hA/+HOFyXr
/7mgbh6bGSWH8oTnFOYMTJT/xxAB8X16ejrne4kg4IIyNSR4dNw1VWnsioB6
QPc4kdsvEVCxsVtcMRceOl3cMAtuBIEUAjl2mqNFZuRsGjh6Rsb+d0f+GUb+
nYUQe3RBGbwpj3YS6ckcF6ddf/a7kvJCKHa8q55kpHdmVceZSjN/0mfG3FfZ
F9oOT5GjtIcNhtpP9EWmVTc3VvCmshipF5MRH5+A8xeSkZ3D7MmpeTVl2tX0
FlcuJSMuPg5nz19ATmEZlfjLrz81vdnz68Y3SDf4mor/141FDOTsUQhPnsu7
o+cyBLu+MIGr52JhY2UJa509vLy94Oqi3ADg5R+Ohk9DJtu3aLg72sLS0gae
3t5woROmKc0aewHD08uGsMXZcCNYq22wJy5QuNZwO0dRNt+4TFs0vAjWUYEN
PpGMkdnlfW4sErysZAZ/lSMsvZvGOmkOT/+jeN3QwVTkKiZHenE95TSsrSzg
ezQeY3MKa072NsPP2RY29h7ILa7GEoMd7e/E2Uhlm0yKZkvNRG+TCktbdRTY
DiQJ2EvKlhr+M97TCF8nnYCtVWD72pEYEahsv7lbSrDGAnm7jM0UW0tjiAx0
xY++tsajyhY1aro8xboQAHNLHR6IK0MqHigbqc5mPdZupDriagsn30j0TSol
FOX3lY1U564/kWCTYiOVk99xOgyegz2/l8I345y/+VS7kYpo4XQkCgNTRjdS
/bl4RgndtR2q5HeUsfGA0xamJ8cxODjIuJ0O/fsSQ4ODGB2fwIag5+bKLCpL
C5D9oABjM8syolaVf5Xn+eKv0EaPdWXLnKUDKpt79UlMvmUulG+Ze9VCRexr
uBhLW+YcaAud4ZY5sReulWrLV5FM1w1YOeqvG2DtbtKWuWAG5kx794yN+88E
KNeEzMMkV9VAE2qHvoKUM5Gw0dmyoTs4OLBndrY6+EWexria4/wCDSKfeeZS
PrZWxxFDuUq6MEKTz1RujLBCdkWLugGSYDrVzY1fqDdG3Oe3SIkNkG6h+DS8
oKZClE2SDKaiySAVIs9PlsMLEM6vBQ+nzxkf3jqePLiJxKSzDNX58+fZs3NJ
Sbh84z5m16HJYa5jaXGRZlufnqXhUA7zRik25F7lPba1KhuR997Wuluec+e2
ViXPmZGRgcePH6OgoIBbCH8ivnv4ol0NnHHzfHRuJ2crx7T9zLZjEbdQdPsq
jvj6Iu3GY8yrJvkGWqqLeNrOysYJz+p6+HbkSNpjrmxZNr5jeRCRR5z22bEs
Ep2fsWOZpvndu3cUn+O/S0tL6pjJE5VZr8tsTTS0y8SYlaXlu3ienQwra2vY
2ekQEhmLa9dvIOXsGababTlvRV+8jUU29LWJLv3E7tyEnp63+7zqM5dv973a
aLfM5X8WrEyBKB4xiKeIgaa67HcNh/XhLTMr2bCOsIUlLDQQDvYU6HeAu6cf
rtwpxNSiMp3rrM+RAS7QeRxF5/CCeoJAlnKCQFZRvXLKgL8zAwnDpxF9WcYz
cT8WP4lgnk4ZcBZ3aC2qw3oq7se6XvTOaLLyT8WUUfCDTtWSewQGDFxng7F9
gfGuBvjYWeDoqYuYXl5Gf283Ojo/YXxq1kRb6MFPkrBxp6vQdh4koUPx+y6u
ShOiAmGpc9ffhEZga+pBEvy8CQYWfzyAp8/eyfMmlEvwlIMkbFFa32VsgApP
HsajFx080iID0eQPGZQNGYzRFJtMXqKC3eBAF51Mb+izkVtc3dC6nJFfpT8D
pJ8fFWLrGoj2IUXBPWQKlMAyC9Tb+daIQf0ILAgdw0rIKJfpUMptXius2X5U
iJ1bMB3PsvuwDvE5k2FFmjvDKNrvacd0SNkpfvIYv57u+ZtWTE9REdvExITJ
P8PE1Iz0btHf8hIutpZw9wlXj2zZXF9AbsYFWJubIersddqdzX/6WirhTLC+
4WjtFbBrC8i5ep7DRp+7qcL2NlXAWWcJD78ItPWOq7AProijYM7fIlijjPrH
Yh6JUZXsSr5yNBRzmpaWNU61GLNMVRZlJcGKCYCDoyOcnZ0PUCUfs5IcHezg
GhhNmkR5jZnm92kZMTOHm1cA0jMyEX8yEtYW5nD0DkZD97jB1Zl0ThCH9Q7k
sHT4D4f1CUZj94QGdhnZaQqsO8FmEmwEh3XyCUFTz4RRo/WPxHBp+SC2tdaw
rYGL8Z+0wz2ID7VPEX4snC4MYf9TPo9HRiAq8RKGZvU5yPWlGTzLvYnAIz5w
cXGBm7snYs6cR0PHoP6cpsVpPM25gUA/DUzcBTR0Dqkwa9tg6OioWAbT2Dlk
NE/5R4IV6XhcPd9S9Fe7LP6+4aDIh6PaJeaPKV6ZiVLLtLG5oYolfa4sLTBu
nsT07DzZB18Yeby562NjDp7sLYWJ5SZlwXA7e/tDIwj+UCCgadw9SPcH+yNQ
6KWkvS4/2r6k7ovAlO8JoAgflW9Pa6ui/3D3d/9ANE7XdMre069hFtEIAmn/
SQQUlCVnnUYgnOTdEcg4y5s3bwQCU7x418e3n13NbzTMgWqPZVducDpImWr5
tcnvC6TKft7tjoWRQ93lei9bzmUzR7mf09drDMO6exwIL9/lww5Rhm1g9n7G
u+VsxLTp6Upeo6HA7/HuH4pnG0b3y+zxoqQS6enJ2SWilObFP9nvRYVKxCE7
qLTHkfaK5jrEI4wy+Wi+IxH0GQjoUEatid0/9hMiOKoRLqK3oXDti8CU78cg
o3CHcO1BOvnusdRKJWGhCNZnvavYKsqZDJOzyzyNRFmXzIImQ6PGCA4pm78r
qfdcYXD6JYZV93Dznz81RECyefnyZS6bEgFl5Em4+a0vbCB0iPSuCKgHhGRl
ZUVFUPG+n29rJeqJGPneCCQZfk88I34X22E0L/7n3V/UA/29xKl/VzyjdWx8
enGb+jNyNYPhi6Z8XzoxJ90nblCptMcY5bs0PX/LlBBZhwZK6DPeraynmSlF
ZuE2vtrjXXVSNo0pof9xJmVPICkkvyOe0cyNTS1sK1n5c8MXtcLxO4KCdDqB
FZNsuoPKYOaMzHpDA1vXV1fVd49eqlRtJAPNsAfHyHfP3dVrJNIQn/Oukm04
zGP5dOhJ4AW9P9j/me3LO1YooZf2sF5zPEg+X7xXP5f1f1t0hvYzm4ljTJXL
GfIMd0H8+f44yHii7AwtDuS3n7/3zjARtwcOJfmpHCdLdhDF+ek246UVbaLm
v+6HwJTvRaUlkkphDJbIv9j/XTrn2qgMf8a7rxsH+UzeeNpiKMN7vPvb4tmQ
/mhRk896UTYqD+WgW7cMCkP2ePe3NJSW9oAy4Nm9G5fCKhEQpflGUPZyRkGj
/hwXYwik0NbW1goEpspeTcFzBrmlv9zZeGMjs0jX1tR36WhhvpyHb5sqI+/K
kf9HOfLNLV6CQBvcbjxp2dbxfRGY8nuZyFOkW6UMeOyv9n83eDce+4x3q5sG
+fu0P3VNuyFjj3d/SzwbGqezMLbz2B4v/gdJLcYndE0jGU4768sEAnkj5crS
PKULmHW2JFJth7A0P422pgZUV1XjfX0jhkYn1PDmxuoSPrY2oqrqNereN2B4
Ykb/3cr272aNpgeVGh5FnxJleEGouBCjX6vCtvW18VUuD1emPXxtIvehURV8
/esihAX6wtraSrmL1dIKTi6euHKrAPNrm2oWY3qwHedPRkCngXPxPILsZ6/J
LVaTPAR2ItwAzNXTH/eKqvTes+GIlIoq5SK6S7nveSGbZaSUtCb9+TjGhtXw
MkcZVq4c1s+h420JXBxsYG1rj7OXb6C6pgbP8rMR4O3MY2cXruVhTdgRq3Nj
SIrwg5mFFSJOJeMVgy18cBOejjqY65zwtKZdRl0INDHcl4NGCtCC+zfg6aCD
BQN9VtthNOryG2LGsuVpKZoj4w1KvP7acGjNrx+Kk1BrRISF8djGAj+G1szM
EudvFNDZHWpUaPBjLfw9HGFt54Gaj0McZdPLXNiwaaD9lZOLaypsXUkOHK0t
EBiTjFkRSWusyOERpJCYFAa7rhbb1xU/gKMVg429iLnVLWNxNDlENdjLhkie
tSK6mzuG+B2Bo/ZZLi4kJ+PSpUusuZSUFJNv4VJqKk5EhfEC9YBj0Ui+eBFF
tUwZL47g3Okw+ByJQGvflJp1ykzkjJZ89zlv4VZSND+ZOa+qTZ+BW5nAiaPe
sLTzRkPXBOf7m4lRfMtKfs0HNfC7PI7YUC8G5oPG7sndB2rKF3/FPcnnRwGp
P0pBpNxn9zjnFp26J3JPP4uzSUlIv3UfYh8nspMi+OYEOztbODk5UgIOjo70
t7342wE6nQ6pOfxMVqyvrmB+YYGJij5PVf8iW9lqeKmA39d9KtwPVna+aOmZ
1BOAOeF3ziqEefyW0XJjBieO+TI4P7T2Tukj35u4naTQ5cnb9r0IUN2sNwAM
ZlhLgBVcOhMJW1t7RgCKkH4PDmxSjxw/g3Gxeje9eAg7G0sEhJ1Ea1c3urvZ
b08PinOv8A0e8Zl56OrqwvjUvLq38uXDy1wuEq48wTrfTuUAe+UQYZUoZXfP
c5jMp++xOduHY74Mhm89kzAHUXrnnLKf+PEbg+CwvErhN8UzTQJNo4e049zC
xMgQ63sPw9PT00O7/Xq60Tcwwu/q5j+bK8hOPQFLC3vcK6mTecfmKiHij2pU
cSN0bXU1yL59G3Vt6jXzy9MDOBnqy+cmi0Y1048IX8YivmzkE6v6rFSKPivF
s5YODISOT9YPvEJmGx8ZZhup/o4yjXl5edxy0Q9WOQdI3Ve2PNWPqEAP2Dr7
4n2XEnLXKGKly9/lG1zp6m0Kfec+e46evgE0vqnEmahgNrmWcPWPQu/UCtan
evgk2vlGomfC6FZImkPK09nTaCf3TyI2NTWR18N/aUvnjqHI6pmu9+VwZgwY
GJuMubUtpnRzt60n38W78mzobHRwcXbm2wStrdnawvpPa4l3UCSqWvs46hV5
+LHhidbl2cnKlBS+E1scCcSQF5/fvaCMI7/WaKJC3/8kw/5T4vbpXUYoMwtk
5r9CS23htv5/ib7WKrgwBR5x8iLevKvBg+zbuHHjJp4UV1AIUzLe1vIYYo95
w8rhCFOw07L79y7E8mQfndnNpgoxYQTij7b+GbX72edjuG55xJSuse7/e/GM
lngqRTXcGiFuEZRHlq4vTeDc8SOwc/FDatoFRnprPVeZYmm0A0c9beEVdpr2
K+tzaGvI5Mk9HQpr2lXNR5sWI47wrXR1nWOcXhkiufektkPVfGvTOMMUp6XO
E+8+je0+BlN+jyGZJpHpr9SjvPiPUk8vrug4hNFP73DExQ46ZoXodLaaGaGt
lDOIOx4AK8cj+Dg4L5MHdcW3YUWb7OIz6Eh1uVi31xTBRWcJ3/B4TImNem+L
bnHQyMRM2o+nao+P1c84rF9EAqaXN/caSMhutrkYyM8IuKrHt/mxEmIQB8X4
aLEg3rC2tkX0qXikpqaKNfw7SLmYjNSs+xhfUMz21dlhxIZ4MhbXISntFtq7
uvH6eSH83JhFxt5/UFqvmiarM0OICfZgXGyLswTbTbAFHNaCweaWNRg1s+Sw
alqGuB1Ch5wYrEzbhrW1vohrSZH40Y9+jAv3KmW6p7owAzY2NrBly661tfUB
+g9rycrSHDrvMPRMrqlbuvvbanA8xI8XMNFiRX/bOrjgcvZTLG+oJnEfA4uU
YNYCzNEF6feeYWXDqEms77QQd2kTzk8N4XlpKZo/jajCNzc1wvUdnelzUP1s
RuvHDjr4RDDdYSzNTqC2qpJfxl1SVo62zj5a2VTHhb5+bfC1UQdkR99++HcK
pFUd5N+olzbxnz0uIP13YlzkOmY9aeYyu7Mc90e7I/i3gm4U37hwv069LcJ8
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
sw==\
\>"],ExpressionUUID->"04608d57-76ac-4167-b06f-a356a5648333"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdz00sXGEYxfE31TSW0nbRBekwo1GfF0OVltv6qo8WUxbYTJqwZVEpSdPe
pZU0aSNsmpsuBruxwaC8bEWq3bWCEYmVFBtLwXOeY0Ei//yc+8y4me8GIn23
jDGdl79Xxc9JjST83dU/oH9/qFPRiZg6Db03rb6Pjs2oH0jt+Kw6Xer1z6kD
aGhenYV9nw7hfm9B/QjdTahz0FM6F729qM7H523QhejXJbWDxuhiNEGX4D62
rC5Fv/1Uh9EpugxdpMtxv7mifoLur6or8H4H9FM8f0hXYj+jq7CnWPUzadpd
+rnUD9DVaBZdI40GaVfqVKs92HRzf4Hne7jDtpf7S2n7CHc4Oc69VupOcIf9
Se510pMEd9j9x70ez29zh80O9wbp4Dl3OPlwTfdGqZep9uBAkPsr7CHucDKb
exOaxx0OONybpU6EO+y+596C/3+IO2w+cG+V2hHusPeR+2t83yfusP3M/Y00
HuMO+5vc29Bf3OHoFvd26Zffahe2f/g8HN9TW9g/4n0H3vc/7+HkMe/h+J11
vYe9DLWJSIeDahcefKz2YD+X9/BWHu/fSkcLeA+7RbyHfYf3sCnhfac0Wsp7
2IZ5f8P2hk3XtS8AJ/rZJw==
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 84.}, {0, 9321.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167520392*^9},ExpressionUUID->"95ae3c55-5809-45a1-bca5-\
1565263e8a81"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxd0F9olXUcx/EftWiEF4cwMtB4GsOW/eFo/plm+qvp3NTpcVMzSztZ5lZR
h7rq7kd4UQmxS2+iJ/AipGCYliujX7byDEacm0zS6iEONsr0REVWFtXv/f0U
KIwPr32ez/N95k27nh7cfYVz7tN/fv5N/rVWpph/yNsvUoav5Xby5bfMJXLr
YfNM8sYj5lnk8/Js8qyc8f7Jt80d5JvvmDvpTxw1zyW/GTd30V//nnkeOXDM
fBv9mffNd5BPfmAuk/vk+eRBeQF5dTTfSS6VF/L+fnkRuV1enDI/IC9J6S/I
3ex7PzQvTRlfkZexr8t38fxP8nLyyuPmu+mvlVfgBfJKPCh7cr854PCl+nvI
8+px+Ev9vXxv9pH12PWYXQ+5R715n/pV5AX15qEJ61eTr5qD+Xv1vXzP7+qx
u+Zj69fQj5sDdiOfWN9H/5w5YPeS+n77e9Vj9+wJ69emrB4wBxw/U7+O/qR6
7D5Xvz5l4wf1OG+rWz+Q0l9lDriQ3YaUrTnqsVusfiPvkwP2S9RXUo5WzB4X
I3oeh8fNEWdPaL+J739Kexye0R5XX9Qe+1z7Qe7JHofXtMfuoPbWH9J+iP0R
7bEf1x43JrXH1S+035yyJnsc5IBLp7XHuey2pOz6Sns8VmiPoxxxQ3ZbU85q
ao+r32qPa3LEQXb3pZz+TntcOa89rsoR12S3LeXFH7XH4Rft8agccS67++l/
1R6H37TH3X9oj1uXtN9O/qk9LskBT7tJ2+PYZnYPpGzIHhdywKfatbfnZ2j/
IM/LHrfkgMdK2uPaTO13pKzLHmfXaY/LcsRedjtTDssej/63x2M3aI8bc7R/
iO+XPW7JAQ93aG/Pz9W+yvNyht3Neh/uvMVcxX236v24Jud4vxxx83Zzgctl
3X+Y/w85wxXZ465Fuo/dMt3HJTnHmRzx6yt0H5d7dH9Xym1yhoPs8V65il+Q
A56Sc1xapfs4kwtclt0jKRfKGe6WPZ63Wvfx7F7dx5mc40454r1ygZuyezTl
tJzhc7LHZ9foPi76dB835dzeJ0dc6dd9fFR2u1MekzMcZY+Pr9V9PLFO93Fd
zvGUHPHy9bqP35DdYynH5Awflj1+d0D3cdyg+3hCznFdjnhKLnBDdntSnpIz
XMgeVzbqPo5ywBNyjutyxCcruo+bm3R/OOW0nOFzssctuYp/lgO+KOf4khxx
GNR93Dak+yMp2+UMz5A97tis+7h7i+5f5vwyx//9NyKlRl4=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 206.}, {0, 12970.4375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.729299884480031*^9, {3.729435952419579*^9, 3.729435964558264*^9}, 
   3.729436008987269*^9, 
   3.729437167583948*^9},ExpressionUUID->"7dbeb069-34e9-4846-ba85-\
90481f9db36e"]
}, Open  ]],

Cell["\<\
As we see from all the graphs the medians are either increasing or \
decreasing. Even though we only looked at 10 examples those examples were of \
random lengths and random integers inside those lengths. \
\>", "Text",
 CellChangeTimes->{{3.729296903531084*^9, 
  3.729296955974224*^9}},ExpressionUUID->"0f793307-9aad-4f89-883a-\
d68af09d84f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Proof of the Strong Terminating Conjecture", "Section",
 CellChangeTimes->{{3.729297125404202*^9, 
  3.72929713674852*^9}},ExpressionUUID->"7b038bc3-199a-402b-9cad-\
6b607f05a3b4"],

Cell["\<\
The strong terminating conjecture states that the sequence of new terms \
settles permanently to the median after a finite number of mean-median \
iterations. To prove this I will just add another checker to the \
medianGenerator function that we wrote above. The while loop now will make \
sure that the current value also equals the median before we stop the loop. \
If the loop stops it means that  the sequence of new terms settles \
permanently to the median after a finite number of mean-median iterations. \
\>", "Text",
 CellChangeTimes->{{3.729297183419757*^9, 
  3.729297320233798*^9}},ExpressionUUID->"26443da2-2441-4a88-b630-\
c02b802123e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"medianChecker", "[", "initSeq0_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"currSeq", "=", "initSeq0"}], ",", "\[IndentingNewLine]", 
      "sortSeq", ",", "totVal", ",", "medVal", ",", "lastVal", ",", "currVal",
       ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "initial", " ", "total", " ", "and", " ", "sorted", " ", "sequence"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"totVal", "=", 
      RowBox[{"Total", "[", "initSeq0", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"calculate", " ", "the", " ", "total", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"sortSeq", "=", 
      RowBox[{"Sort", "[", "initSeq0", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"sort", " ", "the", " ", "sequence"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "these", " ", "are", " ", "needed", " ", "at", " ", "each", " ", 
       "step"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"Length", "[", "initSeq0", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lastVal", "=", 
      RowBox[{"initSeq0", "[", 
       RowBox[{"[", 
        RowBox[{"-", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"define", " ", "last", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"currVal", "=", 
      RowBox[{"initSeq0", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"define", " ", "current", " ", "value"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"med", " ", "=", " ", 
      RowBox[{"Median", "[", "currSeq", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"find", " ", "the", " ", "median"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"lastVal", "\[NotEqual]", "currVal"}], " ", "&&", " ", 
        RowBox[{"med", "\[NotEqual]", "currVal"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Median", " ", "is", " ", "easy", " ", "to", " ", "find", " ", "on", 
         " ", "a", " ", "sorted", " ", "list"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"medVal", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OddQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"sortSeq", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "/", "2"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"sortSeq", "[", 
               RowBox[{"[", 
                RowBox[{"n", "/", "2"}], "]"}], "]"}], "+", 
              RowBox[{"sortSeq", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"n", "/", "2"}], "+", "1"}], "]"}], "]"}]}], 
             ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "redo", " ", "last", " ", "and", " ", "current", " ", "values", " ",
            "using", " ", "the", " ", "pre"}], "-", 
          RowBox[{
          "computed", " ", "\[IndentingNewLine]", "median", " ", "and", " ", 
           "total"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"lastVal", "=", "currVal"}], ";", 
        RowBox[{"(*", 
         RowBox[{
         "save", " ", "the", " ", "curr", " ", "value", " ", "as", " ", "the",
           " ", "last", " ", "one"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "+", "1"}], ")"}], "*", "medVal"}], "-", 
          "totVal"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
         "find", " ", "the", " ", "currVal", " ", "using", " ", "the", " ", 
          "formula"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "append", " ", "to", " ", "our", " ", "current", " ", "sequence", 
          " ", "and", " ", "increment", " ", "n"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"currSeq", ",", "currVal"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"med", " ", "=", " ", 
         RowBox[{"Median", "[", "currSeq", "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"find", " ", "the", " ", "new", " ", "median"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Increment", " ", "the", " ", "total"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"n", "++"}], ";", "\[IndentingNewLine]", 
        RowBox[{"totVal", "=", 
         RowBox[{"totVal", "+", "currVal"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Resort", ".", " ", "Sorting"}], " ", "an", " ", "almost", 
          " ", "sorted", " ", "list", " ", "is", " ", "pretty", " ", "fast"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"sortSeq", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"sortSeq", ",", "currVal"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Delete", "[", 
      RowBox[{"currSeq", ",", 
       RowBox[{"-", "1"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "1", "]"}], ";"}]}], 
   RowBox[{"(*", 
    RowBox[{
    "just", " ", "to", " ", "check", " ", "that", " ", "it", " ", 
     "finished"}], "*)"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7292973502303867`*^9, 3.729297440314063*^9}, {
  3.729297750236844*^9, 
  3.729297766240073*^9}},ExpressionUUID->"0f7a11a4-4c08-4aa7-af3b-\
6bec8b1e61fd"],

Cell["\<\
Again let\[CloseCurlyQuote]s try if this loop stops for our example same as \
in the first part. \
\>", "Text",
 CellChangeTimes->{{3.7292974466220827`*^9, 
  3.7292974615470123`*^9}},ExpressionUUID->"556acd9a-b474-4dcb-90d1-\
b99253544f9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"medianChecker", "[", "vals0", "]"}]], "Input",
 CellChangeTimes->{{3.729297499787343*^9, 
  3.729297502274012*^9}},ExpressionUUID->"69b145a3-d782-4329-b90c-\
68e1016dead6"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.729438875255801*^9},ExpressionUUID->"095eb472-0f56-444a-a026-\
67601eb44474"]
}, Open  ]],

Cell["\<\
Since we don\[CloseCurlyQuote]t have an infinite loop and the function \
finishes let\[CloseCurlyQuote]s try do the same thing but now with 100 random \
lists of random lengths and random lengths and random integers and see if \
those finish and we don\[CloseCurlyQuote]t run in an infinite loop. If so \
then we have proven the Strong Terminating Conjecture. \
\>", "Text",
 CellChangeTimes->{{3.729297506268002*^9, 
  3.729297584589916*^9}},ExpressionUUID->"9a4931ee-13fe-4332-bdd6-\
3cb56df64751"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "100"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", "1000"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "10000"}], ",", "10000"}], "}"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"chose", " ", "a", " ", "random", " ", "int"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"l2", " ", "=", " ", 
     RowBox[{"medianChecker", "[", "randomList", "]"}]}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "l2", "]"}]}], "Input",
 CellChangeTimes->{{3.729297646522461*^9, 
  3.7292977087555227`*^9}},ExpressionUUID->"72827614-702e-4137-a892-\
fe7dd7bb799a"],

Cell[BoxData["1"], "Print",
 CellChangeTimes->{3.729297716538913*^9, 3.7292977756833267`*^9, 
  3.7294388830227737`*^9},ExpressionUUID->"3cd4b562-bfad-4def-b64c-\
9333bf0e4cca"]
}, Open  ]],

Cell["\<\
As we see it takes a few seconds but it runs for 100 lists of random elements \
and lengths and thus proving the Strong Terminating Conjecture.\
\>", "Text",
 CellChangeTimes->{{3.729297782496457*^9, 
  3.72929782851884*^9}},ExpressionUUID->"f2d89546-4c1c-4479-a855-\
eede3119dc93"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Proving that the function is unbounded", "Section",
 CellChangeTimes->{{3.729297959253154*^9, 
  3.729297965998681*^9}},ExpressionUUID->"27aa1377-9402-49e2-bd0b-\
232dcb826981"],

Cell["\<\
In this part of the lab we shall prove that the number of steps required for \
the sequence to settle is not bounded. The way I will chose to do this is to \
show that as we increase the range of random numbers to chose from we will \
need more steps. 

First thing we need is to define a function that counts the steps. \
\>", "Text",
 CellChangeTimes->{{3.729298206219784*^9, 
  3.7292983331331053`*^9}},ExpressionUUID->"2600b6b7-be7d-4a02-a2da-\
b7023b51d44b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numSteps", "[", "initSeq_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"numSteps", "=", "0"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Initialize", " ", "these", " ", "values"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"lastVal", "=", 
       RowBox[{"initSeq", "[", 
        RowBox[{"[", 
         RowBox[{"-", "2"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"currVal", "=", 
       RowBox[{"initSeq", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"currSeq", "=", "initSeq"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"lastVal", " ", "\[NotEqual]", "  ", "currVal"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "promote", " ", "lastVal", " ", "and", " ", "compute", " ", 
         "nextVal"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"lastVal", "=", "currVal"}], ";", "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{"nextVal", "[", "currSeq", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Append", " ", "currVal", " ", "to", " ", "the", " ", "currSeq"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"currSeq", ",", "currVal"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numSteps", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "numSteps", "]"}], ";"}]}], " ", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.729298447638232*^9, 
  3.729298448310155*^9}},ExpressionUUID->"7bff283b-89a4-454e-8650-\
5bc1b9c3db5f"],

Cell["\<\
Now just as before let\[CloseCurlyQuote]s use our double loop to create a \
list of random lists with random lengths. Then we will print the number of \
steps. \
\>", "Text",
 CellChangeTimes->{{3.729298451000887*^9, 
  3.729298516204414*^9}},ExpressionUUID->"4364be7f-79e5-458f-9d40-\
e5403ab7cff4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", "100"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1000"}], ",", "1000"}], "}"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"chose", " ", "a", " ", "random", " ", "int"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"steps", " ", "=", " ", 
     RowBox[{"numSteps", "[", "randomList", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "steps", "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.729298550969393*^9, 3.7292985900690317`*^9}, {
  3.7292986280093412`*^9, 3.7292986312611237`*^9}, {3.7292994958381233`*^9, 
  3.729299535464719*^9}, {3.7292996144695253`*^9, 
  3.729299630457864*^9}},ExpressionUUID->"0d3d4b26-a23f-4d28-839b-\
c2ed571fc6ea"],

Cell[CellGroupData[{

Cell[BoxData["340"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896553109*^9},ExpressionUUID->"e1fb174e-2b6b-47b9-83c9-\
fd39bf8330f9"],

Cell[BoxData["30"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896564027*^9},ExpressionUUID->"4243818c-f6c3-44e7-ae9a-\
c07b78bb5933"],

Cell[BoxData["28"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896576064*^9},ExpressionUUID->"c77343b3-d532-46d2-8e2f-\
2250b6d52c8f"],

Cell[BoxData["94"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.72943889658809*^9},ExpressionUUID->"ec19c322-3ebe-466f-89c2-e596c1d43012"],

Cell[BoxData["43"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.7294388966001883`*^9},ExpressionUUID->"2c5da5cf-3b5d-4acc-830f-\
5438bf40354e"],

Cell[BoxData["8"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896612542*^9},ExpressionUUID->"6db66b23-f2a7-4f40-8eec-\
17e4ed4b1256"],

Cell[BoxData["133"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896627633*^9},ExpressionUUID->"8459bd0b-f5ca-492c-be21-\
aa4716e3b75f"],

Cell[BoxData["59"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.7294388966438217`*^9},ExpressionUUID->"c0481dcd-8c14-49d4-8bc9-\
83c94703848f"],

Cell[BoxData["16"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896658763*^9},ExpressionUUID->"a4ce744f-95b6-4293-b7ad-\
e6a369372561"],

Cell[BoxData["864"], "Print",
 CellChangeTimes->{3.729298590943036*^9, 3.7292986949751368`*^9, 
  3.729299675393529*^9, 
  3.729438896913085*^9},ExpressionUUID->"8b78cb56-a7ce-44a8-839e-\
6c2f4ae971d6"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Now let\[CloseCurlyQuote]s see how the number of steps changes as we increase \
the range of random numbers we choose from to put in our random list. \
\>", "Text",
 CellChangeTimes->{{3.729298615908935*^9, 
  3.7292986543858967`*^9}},ExpressionUUID->"d91d2c07-5602-492a-8f85-\
15754a7d04cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", "100"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "change", " ", "the", " ", "length", " ", "by", " ", "a", " ", 
        "factor", " ", "of", " ", "ten"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "10000"}], ",", "10000"}], "}"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"steps", " ", "=", " ", 
     RowBox[{"numSteps", "[", "randomList", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "steps", "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7292986711305733`*^9, 3.72929871513774*^9}, {
  3.72929954480271*^9, 
  3.729299611197955*^9}},ExpressionUUID->"d9242564-6a75-488f-9875-\
c045806a6d27"],

Cell[CellGroupData[{

Cell[BoxData["264"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.7294389096152363`*^9}},ExpressionUUID->"ed191730-e73e-4c81-95b3-\
1605692c87e7"],

Cell[BoxData["326"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438909667049*^9}},ExpressionUUID->"849705f1-ff11-47e5-878c-\
54fbfa8166ce"],

Cell[BoxData["86"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438909679488*^9}},ExpressionUUID->"032a4a5c-dd23-4c42-85bd-\
c8fd85623291"],

Cell[BoxData["2123"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.7294389116410027`*^9}},ExpressionUUID->"67cee949-0432-4583-b395-\
fde9637a38f2"],

Cell[BoxData["106"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438911657403*^9}},ExpressionUUID->"f6d49309-8140-4462-af5f-\
7265f1da3943"],

Cell[BoxData["764"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.7294389119637938`*^9}},ExpressionUUID->"f3452729-73b7-4e31-8cc1-\
9854e66ff389"],

Cell[BoxData["308"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438912027363*^9}},ExpressionUUID->"bb2bb1bf-bbf0-4db0-ab09-\
1c4e05b94ce3"],

Cell[BoxData["1292"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438912736722*^9}},ExpressionUUID->"eb98b22b-013e-48a5-93b8-\
d6eb5291e914"],

Cell[BoxData["319"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.7294389128092127`*^9}},ExpressionUUID->"76fa0e93-3572-40f2-91f4-\
73fa3bac7aa6"],

Cell[BoxData["116"], "Print",
 CellChangeTimes->{{3.729298699666534*^9, 3.7292987170382223`*^9}, 
   3.729299678485758*^9, {3.729438901008274*^9, 
   3.729438912826603*^9}},ExpressionUUID->"e119f71e-47cd-4aea-8675-\
c4a8dcb15e0c"]
}, Open  ]]
}, Open  ]],

Cell["\<\
As we see the numbers increased. This proves that the function is unbounded \
and the number of steps will increase. (Run this a few times for the numbers \
to be large). This happens since I am randomly choosing the numbers. \
\>", "Text",
 CellChangeTimes->{{3.7292987233105707`*^9, 3.7292987760952168`*^9}, {
  3.729299595555789*^9, 3.729299598505748*^9}, {3.729438921534786*^9, 
  3.729438954922574*^9}},ExpressionUUID->"e5a47967-0c35-48ef-abef-\
d49716906b53"]
}, Open  ]],

Cell[CellGroupData[{

Cell["My own conjectures", "Section",
 CellChangeTimes->{{3.729298819246916*^9, 
  3.729298826027647*^9}},ExpressionUUID->"922e6880-02c9-4539-8647-\
ec02e4611485"],

Cell["\<\
The first conjecture that we I will make is that the number of steps will \
increase as numbers are in a wider range. Proof for that can be seen in the \
part where I was proving that the function is unbounded. When I increased the \
range of random numbers from -1000 to 1000, to -10 000 to 10 000 the number \
of steps increased. 

The next claim that I will make is that when the length of list increases but \
the range where elements are picked, or another way to say this is that the \
variety of numbers is kept the same, then the number of steps will decrease. \
Let\[CloseCurlyQuote]s put this to try

First time we will keep the length still random from 10 to 100 and the range \
for the elements from -10000 to 10000 and we will count the number of steps. \
\>", "Text",
 CellChangeTimes->{{3.729298828526957*^9, 3.729299062813732*^9}, {
  3.729299150842606*^9, 
  3.729299153162129*^9}},ExpressionUUID->"d68309bc-6eae-4afc-baae-\
53b2fb101d2e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", "100"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"listSteps1", " ", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "change", " ", "the", " ", "length", " ", "by", " ", "a", " ", 
        "factor", " ", "of", " ", "ten"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "10000"}], ",", "10000"}], "}"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"steps", " ", "=", " ", 
     RowBox[{"numSteps", "[", "randomList", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"listSteps1", ",", "steps"}], "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Mean", "[", "listSteps1", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "find", " ", "the", " ", "mean", " ", "of", " ", "steps", " ", "for", " ", 
    "all", " ", "10", " ", "lists"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.72929908034464*^9, 3.729299081733304*^9}, {
   3.729299140184721*^9, 3.729299143002305*^9}, {3.729299273692416*^9, 
   3.729299310998448*^9}, 
   3.7292994051671124`*^9},ExpressionUUID->"d8f57725-2b67-439e-ba56-\
2d4214fe8ebb"],

Cell[BoxData["366"], "Output",
 CellChangeTimes->{{3.72929931347011*^9, 3.729299351210491*^9}, 
   3.729438959675811*^9},ExpressionUUID->"1bd899e6-0ed3-4a6c-80b9-\
3f83f0004fb6"]
}, Open  ]],

Cell["\<\
Now we will keep the range the same but the length will be anywhere from \
10000 to 20000 and let\[CloseCurlyQuote]s see what the number of steps will \
be:\
\>", "Text",
 CellChangeTimes->{{3.7292990879860067`*^9, 3.729299111049686*^9}, {
  3.7292993745304337`*^9, 
  3.729299379393928*^9}},ExpressionUUID->"6c9ddf2e-28d7-4638-b3c3-\
b4369f00639a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randomLength", " ", "=", " ", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "20000"}], "}"}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"generate", " ", "random", " ", "length"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"randomList", " ", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "an", " ", "empty", " ", "random", " ", "list"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"listSteps2", " ", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"x", "=", "0"}], ",", 
      RowBox[{"x", "<", "randomLength"}], ",", 
      RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "change", " ", "the", " ", "length", " ", "by", " ", "a", " ", 
        "factor", " ", "of", " ", "ten"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rInt", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "10000"}], ",", "10000"}], "}"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"randomList", ",", "rInt"}], "]"}], ";"}]}], " ", 
     RowBox[{"(*", 
      RowBox[{
      "append", " ", "it", " ", "to", " ", "the", " ", "random", " ", 
       "list"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "get", " ", "the", " ", "list", " ", "of", " ", "medians", " ", "for", 
      " ", "one", " ", "sequence"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"steps", " ", "=", " ", 
     RowBox[{"numSteps", "[", "randomList", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"listSteps2", ",", " ", "steps"}], "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Mean", "[", "listSteps2", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "find", " ", "the", " ", "mean", " ", "of", " ", "steps", " ", "for", " ", 
    "all", " ", "10", " ", "lists"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.729299118252606*^9, 3.7292991236511993`*^9}, {
  3.729299160728043*^9, 3.7292992580596447`*^9}, {3.729299338431059*^9, 
  3.729299397672607*^9}},ExpressionUUID->"c98ad186-7ac9-40af-87be-\
af6c4c3a0d06"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{{3.7294389681888227`*^9, 
  3.7294389727243643`*^9}},ExpressionUUID->"7eee988e-954c-45ba-a0d5-\
003e93b7cf11"]
}, Open  ]],

Cell["\<\
What is interesting here is that the number of steps decreases as the length \
of the list increases but the range we chose stays the same. This was \
different to what I had thought. 

So it seems that the variety of numbers in a list will increase the number of \
steps, and an increase in length of the list will decrease the number of \
steps!\
\>", "Text",
 CellChangeTimes->{{3.72929941779994*^9, 3.729299454967668*^9}, {
  3.729299691634762*^9, 3.729299721128469*^9}, {3.729299786857766*^9, 
  3.7292998169339867`*^9}, {3.7292998536664352`*^9, 
  3.72929986975432*^9}},ExpressionUUID->"77e6283c-fe68-423c-882e-\
5248576cf64f"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>2. Inherited,
FrontEndVersion->"11.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (September \
10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 290, 5, 194, "Title",ExpressionUUID->"4c1f33e0-9a28-4fdc-8691-5fbfbbd63868"],
Cell[873, 29, 1015, 17, 384, "Text",ExpressionUUID->"16005c57-892d-4eeb-8c6f-abdfc63d0f5d"],
Cell[CellGroupData[{
Cell[1913, 50, 168, 3, 134, "Section",ExpressionUUID->"61419295-fdfd-4299-8270-7489df9b1d60"],
Cell[2084, 55, 372, 7, 114, "Text",ExpressionUUID->"88673dfb-1542-4a1e-8ade-97329cca31ce"],
Cell[2459, 64, 1351, 35, 347, "Input",ExpressionUUID->"1fd96d7b-541d-41e9-8ca1-2c64785292de"],
Cell[3813, 101, 310, 7, 114, "Text",ExpressionUUID->"8ce27569-2a86-4772-80a4-d74c1216ad2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4160, 113, 158, 3, 134, "Section",ExpressionUUID->"9b85ef1e-5dba-4ad1-937f-5245fdd8dfd2"],
Cell[4321, 118, 478, 9, 159, "Text",ExpressionUUID->"d3323121-baca-40dc-9c32-62205355703f"],
Cell[4802, 129, 315, 7, 114, "Text",ExpressionUUID->"726e53ed-07e2-48aa-a348-cdc4e88261d3"],
Cell[5120, 138, 7265, 169, 1577, "Input",ExpressionUUID->"61acfcb1-086c-4869-9ed6-da91c50d6dea"],
Cell[12388, 309, 269, 5, 69, "Text",ExpressionUUID->"ea801e9d-aac2-46b6-8fc4-3e5d6d6c1155"],
Cell[CellGroupData[{
Cell[12682, 318, 946, 23, 142, "Input",ExpressionUUID->"8315ef87-837f-40e1-8a7d-84f4d784ee7f"],
Cell[13631, 343, 1633, 42, 514, "Output",ExpressionUUID->"2784e47f-834c-4c3f-8967-d9c2ff881c24"]
}, Open  ]],
Cell[15279, 388, 594, 14, 204, "Text",ExpressionUUID->"5d5f006c-4636-4c6d-aa16-525caa623a54"],
Cell[15876, 404, 3495, 77, 552, "Input",ExpressionUUID->"e9bd6ff2-3d78-4a1a-8f1c-6a3fca800b89"],
Cell[19374, 483, 268, 6, 69, "Text",ExpressionUUID->"6eb4a468-1311-468b-9b52-3c66da659b7f"],
Cell[CellGroupData[{
Cell[19667, 493, 1668, 44, 429, "Input",ExpressionUUID->"a287c395-7bea-4852-a56c-8a3ea55a5c0b"],
Cell[21338, 539, 39286, 660, 507, 7600, 139, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"10255f48-c675-4bd1-9ae7-b615099e2bbf"],
Cell[60627, 1201, 4052, 83, 462, "Output",ExpressionUUID->"7ca54d74-daf0-4280-b7a2-37c87100ead8"],
Cell[64682, 1286, 2589, 59, 472, "Output",ExpressionUUID->"4ea6616b-5f97-4d17-9f01-7a78fa346337"],
Cell[67274, 1347, 1496, 40, 479, "Output",ExpressionUUID->"6449c231-d234-4a05-b1d8-1892c3b3e15f"],
Cell[68773, 1389, 3153, 68, 499, "Output",ExpressionUUID->"8b328820-66e9-4940-9ae3-655ac17ab15a"],
Cell[71929, 1459, 3704, 77, 493, "Output",ExpressionUUID->"b3416097-92c4-4968-9521-9decb71a1476"],
Cell[75636, 1538, 2611, 59, 472, "Output",ExpressionUUID->"a620f96b-174e-4935-aee5-57312bb04320"],
Cell[78250, 1599, 40417, 679, 473, 8133, 148, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"04608d57-76ac-4167-b06f-a356a5648333"],
Cell[118670, 2280, 1968, 49, 501, "Output",ExpressionUUID->"95ae3c55-5809-45a1-bca5-1565263e8a81"],
Cell[120641, 2331, 2606, 59, 526, "Output",ExpressionUUID->"7dbeb069-34e9-4846-ba85-90481f9db36e"]
}, Open  ]],
Cell[123262, 2393, 355, 7, 159, "Text",ExpressionUUID->"0f793307-9aad-4f89-883a-d68af09d84f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123654, 2405, 186, 3, 134, "Section",ExpressionUUID->"7b038bc3-199a-402b-9cad-6b607f05a3b4"],
Cell[123843, 2410, 663, 11, 294, "Text",ExpressionUUID->"26443da2-2441-4a88-b630-c02b802123e5"],
Cell[124509, 2423, 6045, 147, 1372, "Input",ExpressionUUID->"0f7a11a4-4c08-4aa7-af3b-6bec8b1e61fd"],
Cell[130557, 2572, 251, 6, 69, "Text",ExpressionUUID->"556acd9a-b474-4dcb-90d1-b99253544f9b"],
Cell[CellGroupData[{
Cell[130833, 2582, 196, 4, 59, "Input",ExpressionUUID->"69b145a3-d782-4329-b90c-68e1016dead6"],
Cell[131032, 2588, 130, 3, 89, "Output",ExpressionUUID->"095eb472-0f56-444a-a026-67601eb44474"]
}, Open  ]],
Cell[131177, 2594, 510, 9, 204, "Text",ExpressionUUID->"9a4931ee-13fe-4332-bdd6-3cb56df64751"],
Cell[CellGroupData[{
Cell[131712, 2607, 1989, 50, 470, "Input",ExpressionUUID->"72827614-702e-4137-a892-fe7dd7bb799a"],
Cell[133704, 2659, 177, 3, 47, "Print",ExpressionUUID->"3cd4b562-bfad-4def-b64c-9333bf0e4cca"]
}, Open  ]],
Cell[133896, 2665, 292, 6, 114, "Text",ExpressionUUID->"f2d89546-4c1c-4479-a855-eede3119dc93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134225, 2676, 183, 3, 134, "Section",ExpressionUUID->"27aa1377-9402-49e2-bd0b-232dcb826981"],
Cell[134411, 2681, 473, 10, 249, "Text",ExpressionUUID->"2600b6b7-be7d-4a02-a2da-b7023b51d44b"],
Cell[134887, 2693, 1936, 48, 675, "Input",ExpressionUUID->"7bff283b-89a4-454e-8650-5bc1b9c3db5f"],
Cell[136826, 2743, 310, 7, 114, "Text",ExpressionUUID->"4364be7f-79e5-458f-9d40-e5403ab7cff4"],
Cell[CellGroupData[{
Cell[137161, 2754, 2144, 53, 470, "Input",ExpressionUUID->"0d3d4b26-a23f-4d28-839b-c2ed571fc6ea"],
Cell[CellGroupData[{
Cell[139330, 2811, 202, 4, 47, "Print",ExpressionUUID->"e1fb174e-2b6b-47b9-83c9-fd39bf8330f9"],
Cell[139535, 2817, 201, 4, 47, "Print",ExpressionUUID->"4243818c-f6c3-44e7-ae9a-c07b78bb5933"],
Cell[139739, 2823, 201, 4, 47, "Print",ExpressionUUID->"c77343b3-d532-46d2-8e2f-2250b6d52c8f"],
Cell[139943, 2829, 198, 3, 47, "Print",ExpressionUUID->"ec19c322-3ebe-466f-89c2-e596c1d43012"],
Cell[140144, 2834, 203, 4, 47, "Print",ExpressionUUID->"2c5da5cf-3b5d-4acc-830f-5438bf40354e"],
Cell[140350, 2840, 200, 4, 47, "Print",ExpressionUUID->"6db66b23-f2a7-4f40-8eec-17e4ed4b1256"],
Cell[140553, 2846, 202, 4, 47, "Print",ExpressionUUID->"8459bd0b-f5ca-492c-be21-aa4716e3b75f"],
Cell[140758, 2852, 203, 4, 47, "Print",ExpressionUUID->"c0481dcd-8c14-49d4-8bc9-83c94703848f"],
Cell[140964, 2858, 201, 4, 47, "Print",ExpressionUUID->"a4ce744f-95b6-4293-b7ad-e6a369372561"],
Cell[141168, 2864, 202, 4, 47, "Print",ExpressionUUID->"8b78cb56-a7ce-44a8-839e-6c2f4ae971d6"]
}, Open  ]]
}, Open  ]],
Cell[141397, 2872, 302, 6, 114, "Text",ExpressionUUID->"d91d2c07-5602-492a-8f85-15754a7d04cc"],
Cell[CellGroupData[{
Cell[141724, 2882, 2129, 54, 511, "Input",ExpressionUUID->"d9242564-6a75-488f-9875-c045806a6d27"],
Cell[CellGroupData[{
Cell[143878, 2940, 232, 4, 47, "Print",ExpressionUUID->"ed191730-e73e-4c81-95b3-1605692c87e7"],
Cell[144113, 2946, 230, 4, 47, "Print",ExpressionUUID->"849705f1-ff11-47e5-878c-54fbfa8166ce"],
Cell[144346, 2952, 229, 4, 47, "Print",ExpressionUUID->"032a4a5c-dd23-4c42-85bd-c8fd85623291"],
Cell[144578, 2958, 233, 4, 47, "Print",ExpressionUUID->"67cee949-0432-4583-b395-fde9637a38f2"],
Cell[144814, 2964, 230, 4, 47, "Print",ExpressionUUID->"f6d49309-8140-4462-af5f-7265f1da3943"],
Cell[145047, 2970, 232, 4, 47, "Print",ExpressionUUID->"f3452729-73b7-4e31-8cc1-9854e66ff389"],
Cell[145282, 2976, 230, 4, 47, "Print",ExpressionUUID->"bb2bb1bf-bbf0-4db0-ab09-1c4e05b94ce3"],
Cell[145515, 2982, 231, 4, 47, "Print",ExpressionUUID->"eb98b22b-013e-48a5-93b8-d6eb5291e914"],
Cell[145749, 2988, 232, 4, 47, "Print",ExpressionUUID->"76fa0e93-3572-40f2-91f4-73fa3bac7aa6"],
Cell[145984, 2994, 230, 4, 47, "Print",ExpressionUUID->"e119f71e-47cd-4aea-8675-c4a8dcb15e0c"]
}, Open  ]]
}, Open  ]],
Cell[146241, 3002, 475, 8, 159, "Text",ExpressionUUID->"e5a47967-0c35-48ef-abef-d49716906b53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146753, 3015, 163, 3, 134, "Section",ExpressionUUID->"922e6880-02c9-4539-8647-ec02e4611485"],
Cell[146919, 3020, 966, 18, 519, "Text",ExpressionUUID->"d68309bc-6eae-4afc-baae-53b2fb101d2e"],
Cell[CellGroupData[{
Cell[147910, 3042, 2577, 64, 593, "Input",ExpressionUUID->"d8f57725-2b67-439e-ba56-2d4214fe8ebb"],
Cell[150490, 3108, 178, 3, 89, "Output",ExpressionUUID->"1bd899e6-0ed3-4a6c-80b9-3f83f0004fb6"]
}, Open  ]],
Cell[150683, 3114, 359, 8, 114, "Text",ExpressionUUID->"6c9ddf2e-28d7-4638-b3c3-b4369f00639a"],
Cell[CellGroupData[{
Cell[151067, 3126, 2562, 63, 593, "Input",ExpressionUUID->"c98ad186-7ac9-40af-87be-af6c4c3a0d06"],
Cell[153632, 3191, 158, 3, 123, "Output",ExpressionUUID->"7eee988e-954c-45ba-a0d5-003e93b7cf11"]
}, Open  ]],
Cell[153805, 3197, 643, 13, 249, "Text",ExpressionUUID->"77e6283c-fe68-423c-882e-5248576cf64f"]
}, Open  ]]
}, Open  ]]
}
]
*)

